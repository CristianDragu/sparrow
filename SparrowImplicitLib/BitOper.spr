import "BitOper.llvm";
import PrecedenceUtils;

//using bitOperPrecedence = getOperPrecedence("*") + 100;
public using bitOperPrecedence = oper_precedence_* + 100;

//setOperPrecedence("!|!", bitOperPrecedence);
//setOperPrecedence("!^!", bitOperPrecedence+10);
//setOperPrecedence("!&!", bitOperPrecedence+20);
//setOperPrecedence("!<<!", bitOperPrecedence+30);
//setOperPrecedence("!>>!", bitOperPrecedence+30);
public using oper_precedence_!|! = bitOperPrecedence;
public using oper_precedence_!^! = bitOperPrecedence+10;
public using oper_precedence_!&! = bitOperPrecedence+20;
public using oper_precedence_!<<! = bitOperPrecedence+30;
public using oper_precedence_!>>! = bitOperPrecedence+30;

public fun[autoCt, native("_bit_neg_8")] pre_!~!(n: Byte): Byte;
public fun[autoCt, native("_bit_shl_8")] !<<!(n, k: Byte): Byte;
public fun[autoCt, native("_bit_ashr_8")] !>>!(n, k: Byte): Byte;
public fun[autoCt, native("_bit_xor_8")] !^!(n1, n2: Byte): Byte;
public fun[autoCt, native("_bit_or_8")] !|!(n1, n2: Byte): Byte;
public fun[autoCt, native("_bit_and_8")] !&!(n1, n2: Byte): Byte;

public fun[autoCt, native("_bit_neg_8")] pre_!~!(n: UByte): UByte;
public fun[autoCt, native("_bit_shl_8")] !<<!(n, k: UByte): UByte;
public fun[autoCt, native("_bit_lshr_8")] !>>!(n, k: UByte): UByte;
public fun[autoCt, native("_bit_xor_8")] !^!(n1, n2: UByte): UByte;
public fun[autoCt, native("_bit_or_8")] !|!(n1, n2: UByte): UByte;
public fun[autoCt, native("_bit_and_8")] !&!(n1, n2: UByte): UByte;

public fun[autoCt, native("_bit_neg_16")] pre_!~!(n: Short): Short;
public fun[autoCt, native("_bit_shl_16")] !<<!(n, k: Short): Short;
public fun[autoCt, native("_bit_ashr_16")] !>>!(n, k: Short): Short;
public fun[autoCt, native("_bit_xor_16")] !^!(n1, n2: Short): Short;
public fun[autoCt, native("_bit_or_16")] !|!(n1, n2: Short): Short;
public fun[autoCt, native("_bit_and_16")] !&!(n1, n2: Short): Short;

public fun[autoCt, native("_bit_neg_16")] pre_!~!(n: UShort): UShort;
public fun[autoCt, native("_bit_shl_16")] !<<!(n, k: UShort): UShort;
public fun[autoCt, native("_bit_lshr_16")] !>>!(n, k: UShort): UShort;
public fun[autoCt, native("_bit_xor_16")] !^!(n1, n2: UShort): UShort;
public fun[autoCt, native("_bit_or_16")] !|!(n1, n2: UShort): UShort;
public fun[autoCt, native("_bit_and_16")] !&!(n1, n2: UShort): UShort;

public fun[autoCt, native("_bit_neg_32")] pre_!~!(n: Int): Int;
public fun[autoCt, native("_bit_shl_32")] !<<!(n, k: Int): Int;
public fun[autoCt, native("_bit_ashr_32")] !>>!(n, k: Int): Int;
public fun[autoCt, native("_bit_xor_32")] !^!(n1, n2: Int): Int;
public fun[autoCt, native("_bit_or_32")] !|!(n1, n2: Int): Int;
public fun[autoCt, native("_bit_and_32")] !&!(n1, n2: Int): Int;

public fun[autoCt, native("_bit_neg_32")] pre_!~!(n: UInt): UInt;
public fun[autoCt, native("_bit_shl_32")] !<<!(n, k: UInt): UInt;
public fun[autoCt, native("_bit_lshr_32")] !>>!(n, k: UInt): UInt;
public fun[autoCt, native("_bit_xor_32")] !^!(n1, n2: UInt): UInt;
public fun[autoCt, native("_bit_or_32")] !|!(n1, n2: UInt): UInt;
public fun[autoCt, native("_bit_and_32")] !&!(n1, n2: UInt): UInt;

public fun[autoCt, native("_bit_neg_64")] pre_!~!(n: Long): Long;
public fun[autoCt, native("_bit_shl_64")] !<<!(n, k: Long): Long;
public fun[autoCt, native("_bit_ashr_64")] !>>!(n, k: Long): Long;
public fun[autoCt, native("_bit_xor_64")] !^!(n1, n2: Long): Long;
public fun[autoCt, native("_bit_or_64")] !|!(n1, n2: Long): Long;
public fun[autoCt, native("_bit_and_64")] !&!(n1, n2: Long): Long;

public fun[autoCt, native("_bit_neg_64")] pre_!~!(n: ULong): ULong;
public fun[autoCt, native("_bit_shl_64")] !<<!(n, k: ULong): ULong;
public fun[autoCt, native("_bit_lshr_64")] !>>!(n, k: ULong): ULong;
public fun[autoCt, native("_bit_xor_64")] !^!(n1, n2: ULong): ULong;
public fun[autoCt, native("_bit_or_64")] !|!(n1, n2: ULong): ULong;
public fun[autoCt, native("_bit_and_64")] !&!(n1, n2: ULong): ULong;

public fun[autoCt, native("_bit_neg_64")] pre_!~!(n: SizeType): SizeType;
public fun[autoCt, native("_bit_shl_64")] !<<!(n, k: SizeType): SizeType;
public fun[autoCt, native("_bit_ashr_64")] !>>!(n, k: SizeType): SizeType;
public fun[autoCt, native("_bit_xor_64")] !^!(n1, n2: SizeType): SizeType;
public fun[autoCt, native("_bit_or_64")] !|!(n1, n2: SizeType): SizeType;
public fun[autoCt, native("_bit_and_64")] !&!(n1, n2: SizeType): SizeType;

public fun[autoCt, native("_bit_neg_64")] pre_!~!(n: DiffType): DiffType;
public fun[autoCt, native("_bit_shl_64")] !<<!(n, k: DiffType): DiffType;
public fun[autoCt, native("_bit_lshr_64")] !>>!(n, k: DiffType): DiffType;
public fun[autoCt, native("_bit_xor_64")] !^!(n1, n2: DiffType): DiffType;
public fun[autoCt, native("_bit_or_64")] !|!(n1, n2: DiffType): DiffType;
public fun[autoCt, native("_bit_and_64")] !&!(n1, n2: DiffType): DiffType;
