import Nodes;
import BitOper;

public class[ct] LType
{
    public using atom = 1;
    public using number = 2;
    //public using input = 4;
    //public using output = 8;
    public using initialVal = atom !|! number;// !|! input !|! output;

    private var bits: Int;

    public fun ctor
    {
        bits ctor initialVal;
    }

    public fun isValid: Bool       = (testBit(atom) || testBit(number));// && (testBit(input) || testBit(output));

    public fun isAtom: Bool        = testBit(atom);
    public fun isNumber: Bool      = testBit(number);
    public fun isAtomOnly: Bool    = testBit(atom) && !testBit(number);
    public fun isNumberOnly: Bool  = testBit(number) && !testBit(atom);


    public fun setAtomOnly: Bool   = setAlternativeBits(atom, number);
    public fun setNumberOnly: Bool = setAlternativeBits(number, atom);

    //public fun setInputOnly: Bool  = setAlternativeBits(input, output);
    //public fun setOutputOnly: Bool = setAlternativeBits(output, input);

    private fun testBit(b: Int): Bool = ((bits !&! b) != 0);

    private fun setAlternativeBits(toSet, toClear: Int): Bool
    {
        if ( !testBit(toSet) )
            return false;
        if ( testBit(toClear) )
            bits -= toClear;
        return true;
    }
}

/// Structure indicating of set of expressions that share the same type
public class[ct] LTypeSet
{
    var type: LType;                    ///< The type of all the expressions in this set
    var expList: Vector(ExpressionPtr); ///< The list of all the expressions in this set, that share the same type
    var idx: Int;                       ///< The index of this type set

    public fun ctor(idx: Int, type: LType)
    {
        this.type ctor type;
        this.expList ctor;
        this.idx ctor idx;
    }

    public fun addExpression(exp: @ExpressionPtr)
    {
        expList.pushBack(exp);
        exp.get().typeSetIdx = idx;
    }

    public fun setAtomOnly(loc: @Location)
    {
        if ( !type.setAtomOnly() )
            reportTypeError(loc);
    }

    public fun setNumberOnly(loc: @Location)
    {
        if ( !type.setNumberOnly() )
            reportTypeError(loc);
    }

    public fun mergeWith(other: @LTypeSet, mergeLocation: @Location)
    {
        if ( this === other )
            return;

        //cout << '{' << idx << "} + {" << other.idx << "} -- <" << this << "> ++++ <" << other << ">" << flush;

        // Merge the two lists
        //expList.insertAfter(other.expList.all(), expList.all());
        expList.reserve(expList.size() + other.expList.size());
        for ( e = other.expList.all() )
        {
            expList.pushBack(e);
            e.get().typeSetIdx = idx;
        }
        other.expList.clear();

        // Compute merged type
        if ( other.type.isAtomOnly() )
        {
            if ( !type.setAtomOnly() )
                reportTypeError(mergeLocation);
        }
        else if ( other.type.isNumberOnly() )
        {
            if ( !type.setNumberOnly() )
                reportTypeError(mergeLocation);
        }

        other.type = LType();

        //cout << " => " << this << endl << flush;
    }

    public fun >>(os: @OutStream)
    {
        os << '{' << idx << "} ";
        if ( type.isAtomOnly() )
            os << "str";
        else if ( type.isNumberOnly() )
            os << "int";
        else
            os << "???";
        os << " :";
        for ( pe = expList.all() )
        {
            os << ' ' << pe.get();
        }
    }

    private fun reportTypeError(loc: @Location)
    {
        var diags: Vector(Meta.Diagnostic);
        var l = loc.asMetaLocation();
        diags.pushBack(Meta.Diagnostic("Type mismatch: cannot combine atom with number", l, Meta.diagError));

        //writeLoc(loc);
        //cout << "ERROR: Type mismatch: cannot combine atom with number" << endl;

        var atomExp = findAtomExp();
        if ( atomExp isSet )
        {
            var lAtom = atomExp.get().loc.asMetaLocation();
            diags.pushBack(Meta.Diagnostic("See also atom expression:", lAtom, Meta.diagInfo));

            //writeLoc(atomExp.get().loc);
            //cout << "See atom expression" << endl;
        }

        var numExp = findNumberExp();
        if ( numExp isSet )
        {
            var lNum = numExp.get().loc.asMetaLocation();
            diags.pushBack(Meta.Diagnostic("See also number expression:", lNum, Meta.diagInfo));

            //writeLoc(numExp.get().loc);
            //cout << "See numeric expression" << endl;
        }

        Meta.report(diags);

        //OS.exit(-1);
    }

    private fun findNumberExp: ExpressionPtr
    {
        for ( e = expList.all() )
        {
            var k = e.get().kind;
            if ( k == ekNumber || k == ekOpPlus || k == ekOpMinus || k == ekOpMul || k == ekOpDiv )
                return e;
        }
        return ExpressionPtr();
    }

    private fun findAtomExp: ExpressionPtr
    {
        for ( e = expList.all() )
        {
            var k = e.get().kind;
            if ( k == ekAtom )
                return e;
        }
        return ExpressionPtr();
    }

    private fun writeLoc(loc: @Location)
    {
        cout << '(' << loc.startLineNo << ':' << loc.startColNo << " - " << loc.endLineNo << ':' << loc.endColNo << "): ";
    }
}
