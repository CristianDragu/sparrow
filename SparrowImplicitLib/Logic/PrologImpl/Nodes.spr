import Token;
import SL.Vector;
import SL.SharedPtr;

using PrologProgramPtr = SharedPtr(PrologProgram);
using PredicateClausePtr = SharedPtr(PredicateClause);
using ConditionPtr = SharedPtr(Condition);
using ExpressionPtr = SharedPtr(Expression);

class[ct] PrologProgram
{
    var predicates: Vector(PredicateClausePtr);
    var loc: Location;

    fun >>(os: @OutStream)
    {
        for ( p = predicates.all() )
            os << p << endl;
    }
}

class[ct] PredicateClause
{
    var name: String;
    var args: Vector(ExpressionPtr);
    var conditions: Vector(ConditionPtr);
    var loc: Location;

    fun >>(os: @OutStream)
    {
        os << name << "(";
        for ( i = 0..args.size() )
        {
            if ( i>0 )
                os << ", ";
            os << args(i).get();
        }
        os << ") :- ";
        for ( i = 0..conditions.size() )
        {
            if ( i>0 )
                os << ", ";
            os << conditions(i).get();
        }
        os << ".";
    }
}

class[ct] Condition
{
    var kind: Int;
    var loc: Location;
    var args: Vector(SharedPtr(Expression));
    var predName: String;

    fun ctor(loc: @Location, predName: @String, args: @Vector(SharedPtr(Expression)))
    {
        this.kind ctor ckPredCall;
        this.loc ctor loc;
        this.predName ctor predName;
        this.args ctor args;
    }

    fun ctor(loc: @Location, isLeft, isRight: @SharedPtr(Expression))
    {
        this.kind ctor ckIsExpr;
        this.loc ctor loc;
        this.predName ctor;
        this.args ctor;
        this.args.reserve(2);
        this.args.pushBack(isLeft);
        this.args.pushBack(isRight);
    }

    fun >>(os: @OutStream)
    {
        if ( kind == ckPredCall )
        {
            os << predName << '(';
            for ( i = 0..args.size() )
            {
                if ( i>0 )
                    os << ", ";
                os << args(i).get();
            }
            os << ')';
        }
        else
            os << args(0).get() << " is " << args(1).get();
    }
}

class[ct] Expression
{
    var kind: Int;
    var loc: Location;
    var data: String;
    var left, right: SharedPtr(Expression);
    var typeSetIdx: Int;
    var paramIdx: Int;

    fun ctor(kind: Int, loc: @Location)
    {
        this.kind ctor kind;
        this.loc ctor loc;
        this.data ctor;
        this.left ctor;
        this.right ctor;
        this.typeSetIdx ctor -1;
        this.paramIdx ctor -1;
    }

    fun ctor(kind: Int, loc: @Location, data: @String)
    {
        this.kind ctor kind;
        this.loc ctor loc;
        this.data ctor data;
        this.left ctor;
        this.right ctor;
        this.typeSetIdx ctor -1;
        this.paramIdx ctor -1;
    }

    fun ctor(kind: Int, loc: @Location, left, right: @SharedPtr(Expression))
    {
        this.kind ctor kind;
        this.loc ctor loc;
        this.data ctor;
        this.left ctor left;
        this.right ctor right;
        this.typeSetIdx ctor -1;
        this.paramIdx ctor -1;
    }

    fun >>(os: @OutStream)
    {
        if ( kind == ekAtom )
            os << data;
        else if ( kind == ekNumber )
            os << data;
        else if ( kind == ekVar )
            os << "var<" << data << '>';
        else if ( kind == ekAntiQuote )
            os << "aq<" << data << '>';
        else if ( kind == ekOpPlus )
            os << '(' << left.get() << '+' << right.get() << ')';
        else if ( kind == ekOpMinus )
            os << '(' << left.get() << '-' << right.get() << ')';
        else if ( kind == ekOpMul )
            os << '(' << left.get() << '*' << right.get() << ')';
        else if ( kind == ekOpDiv )
            os << '(' << left.get() << '/' << right.get() << ')';
        else
            os << "<invalid expression kind:" << kind << ">";
    }
}

using ekAtom = 0;
using ekNumber = 1;
using ekVar = 2;
using ekAntiQuote = 3;
using ekOpPlus = 4;
using ekOpMinus = 5;
using ekOpMul = 6;
using ekOpDiv = 7;

using ckPredCall = 8;
using ckIsExpr = 9;

fun[ct] mkAtom(loc: @Location, atom: @String): ExpressionPtr = ExpressionPtr.create(ekAtom, loc, atom);
fun[ct] mkNumber(loc: @Location, data: @String): ExpressionPtr = ExpressionPtr.create(ekNumber, loc, data);
fun[ct] mkVar(loc: @Location, varName: @String): ExpressionPtr = ExpressionPtr.create(ekVar, loc, varName);
fun[ct] mkAntiQuote(loc: @Location, aq: @String): ExpressionPtr = ExpressionPtr.create(ekAntiQuote, loc, aq);

fun[ct] mkOpPlus(loc: @Location, l, r: @ExpressionPtr): ExpressionPtr = ExpressionPtr.create(ekOpPlus, loc, l, r);
fun[ct] mkOpMinus(loc: @Location, l, r: @ExpressionPtr): ExpressionPtr = ExpressionPtr.create(ekOpMinus, loc, l, r);
fun[ct] mkOpMul(loc: @Location, l, r: @ExpressionPtr): ExpressionPtr = ExpressionPtr.create(ekOpMul, loc, l, r);
fun[ct] mkOpDiv(loc: @Location, l, r: @ExpressionPtr): ExpressionPtr = ExpressionPtr.create(ekOpDiv, loc, l, r);

fun[ct] mkPredCall(loc: @Location, predName: @String, args: @Vector(ExpressionPtr)): ConditionPtr = ConditionPtr.create(loc, predName, args);
fun[ct] mkIsExpr(loc: @Location, l, r: @ExpressionPtr): ConditionPtr = ConditionPtr.create(loc, l, r);
