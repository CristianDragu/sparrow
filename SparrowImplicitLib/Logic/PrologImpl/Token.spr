import Location;
import SL.String;
import CharType;

public using tkEof = -1;
public using tkWhitespace = 0;
public using tkLParen = 1;
public using tkRParen = 2;
public using tkLBracket = 3;
public using tkRBracket = 4;
public using tkDot = 5;
public using tkComma = 6;
public using tkClause = 7;
public using tkVar = 8;
public using tkAtom = 9;
public using tkNumber = 10;
public using tkAntiQuote = 11;
public using tkIs = 12;
public using tkOpPlus = 13;
public using tkOpMinus = 14;
public using tkOpMul = 15;
public using tkOpDiv = 16;

public class[rtct] Token
{
    public var loc: Location;
    public var type: Int;
    public var data: String;

    public fun ctor(loc: @Location, type: Int)
    {
        this.loc ctor loc;
        this.type ctor type;
        this.data ctor;
    }
    public fun ctor(loc: @Location, type: Int, data: @String)
    {
        this.loc ctor loc;
        this.type ctor type;
        this.data ctor data;
    }

    public fun >>(os: @OutStream)
    {
        if ( type == tkEof )
            os << "<eof>";
        else if ( type == tkWhitespace )
            os << "<ws>";
        else if ( type == tkLParen )
            os << "<(>";
        else if ( type == tkRParen )
            os << "<)>";
        else if ( type == tkLBracket )
            os << "<[>";
        else if ( type == tkRBracket )
            os << "<]>";
        else if ( type == tkDot )
            os << "<.>";
        else if ( type == tkComma )
            os << "<,>";
        else if ( type == tkClause )
            os << "<:->";
        else if ( type == tkVar )
            os << "<v:" << data << ">";
        else if ( type == tkAtom )
            os << "<a:" << data << ">";
        else if ( type == tkNumber )
            os << "<n:" << data << ">";
        else if ( type == tkAntiQuote )
            os << "<$:" << data << ">";
        else
            os << "<?:" << data << ">";
    }
}

public fun[rtct] tokenTypeToString(type: Int): String
{
    if ( type == tkEof )
        return "EOF";
    else if ( type == tkWhitespace )
        return "whitespace";
    else if ( type == tkLParen )
        return "'('";
    else if ( type == tkRParen )
        return "')'";
    else if ( type == tkLBracket )
        return "'['";
    else if ( type == tkRBracket )
        return "']'";
    else if ( type == tkDot )
        return "'.'";
    else if ( type == tkComma )
        return "','";
    else if ( type == tkClause )
        return "':-'";
    else if ( type == tkVar )
        return "variable";
    else if ( type == tkAtom )
        return "atom";
    else if ( type == tkNumber )
        return "number";
    else if ( type == tkAntiQuote )
        return "antiquote";
    else
        return "invalid token";

}

