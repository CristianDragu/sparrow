module Logic.Recurse;

import Predicates;
import SL.Bind;

fun rec(pred: @AnyType)
    = Impl.mkRecurse(mkBindAll(pred))
    if isValid(pred());
fun rec(pred, a1: @AnyType)
    = Impl.mkRecurse(mkBindAll(pred, mkLRef(a1)))
    if isValid(pred(a1));
fun rec(pred, a1, a2: @AnyType)
    //= Impl.mkRecurse(mkBindAll(pred, mkLRef(a1), mkLRef(a2)))
    = Impl.mkRecurse(mkBindAll(pred, a1, mkLRef(a2)))
    if isValid(pred(a1, a2));
fun rec(pred, a1, a2, a3: @AnyType)
    = Impl.mkRecurse(mkBindAll(pred, mkLRef(a1), mkLRef(a2), mkLRef(a3)))
    if isValid(pred(a1, a2, a3));
fun rec(pred, a1, a2, a3, a4: @AnyType)
    = Impl.mkRecurse(mkBindAll(pred, mkLRef(a1), mkLRef(a2), mkLRef(a3), mkLRef(a4)))
    if isValid(pred(a1, a2, a3, a4));
fun rec(pred, a1, a2, a3, a4, a5: @AnyType)
    = Impl.mkRecurse(mkBindAll(pred, mkLRef(a1), mkLRef(a2), mkLRef(a3), mkLRef(a4), mkLRef(a5)))
    if isValid(pred(a1, a2, a3, a4, a5));

package Impl
{
    fun mkRecurse(predGenerator: @AnyType) = Recurse(-@typeOf(predGenerator))(predGenerator);
}


class Recurse(predGeneratorType: Type)
{
    fun ctor(predGenerator: @predGeneratorType)
    {
        this.relation ctor;
        this.predGenerator ctor predGenerator;
        if[ct] ( isValid(logicDebug) )
            cout << "Recurse.ctor: " << this << "\n";
    }

    fun (): Bool
    {
        if ( relation.isNull() )
            relation = predGenerator();
        if[ct] ( isValid(logicDebug) )
            cout << "Recurse.(): " << this << "\n";
        return relation();
    }

    fun >>(os: @OutStream)
    {
        os << "Recurse(this=" << mkStreamRefWrapper(this)
           << ", fun=" << relation;
        if[ct] ( isValid( os << predGenerator ) )
            os << ", gen=" << predGenerator;
        os << ")";
    }

    private var relation: Predicate;
    private var predGenerator: predGeneratorType;
}
