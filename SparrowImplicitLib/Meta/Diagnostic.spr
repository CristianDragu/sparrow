package Meta;

import Meta.Location;
import SL.Vector;
import SL.String;

public using diagInternal = 0;
public using diagError = 1;
public using diagWarning = 2;
public using diagInfo = 3;

public class[ct] Diagnostic
{
    public var message: StringRef;
    public var location: Location;
    public var type: Int;

    public fun ctor
    {
        this.ctor("", Location(), 1);
    }

    public fun ctor(message: StringRef, location: Location, type: Int)
    {
        this.message ctor message;
        this.location ctor location;
        this.type ctor type;
    }
}

public fun[ct] report(diags: Vector(Diagnostic))
{
    var withErrors = false;
    for ( d: @Diagnostic = diags.all() )
    {
        Impl.report(d.type, d.message, d.location);
        withErrors = withErrors || d.type == diagInternal || d.type == diagError;
    }
    if ( withErrors )
        Impl.raise();
}
public fun[ct] report(diag: Diagnostic)
{
    Impl.report(diag.type, diag.message, diag.location);
    if ( diag.type == diagInternal || diag.type == diagError )
        Impl.raise();
}
public fun[ct] report(msg: StringRef)
{
    Impl.report(diagError, msg, null);
    Impl.raise();
}
public fun[ct] report(msg: StringRef, loc: Location)
{
    Impl.report(diagError, msg, loc);
    Impl.raise();
}

package Impl
{
    fun[ct, native("$Meta.report")] report(type: Int, message: StringRef, location: @Location);
    fun[ct, native("$Meta.raise")] raise();
}
