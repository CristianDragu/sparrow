package OS;

import SL.String;

public fun[rtct, native("exit")] exit(code: Int);

public fun[rtct] systemCall(cmd: StringRef): Int
{
    return OsImpl.system(cmd.cStr());
}

public class[rtct] File
{
    public fun ctor
    {
        handle := null;
    }

    public fun ctor(handle: @Byte)
    {
        this.handle := handle;
    }

    public fun dtor
    {
        close();
    }

    public fun[static] open(filename, mode: StringRef): File
    {
        return File(OsImpl.fopen(filename.cStr(), mode.cStr()));
    }

    public fun close
    {
        if ( isOpen() )
            OsImpl.fclose(handle);
        handle := null;
    }

    public fun flush       = ife(isOpen(), OsImpl.fflush(handle), -1);

    public fun isOpen      = handle !== null;
    public fun isEof       = 0 != OsImpl.feof(handle);

    public fun readChar: Char = Char(OsImpl.fgetc(handle));
    public fun readLine: String
    {
        var res: String = 256;
        var cstr: @Char = OsImpl.fgets(res(0), 256, handle);
        if ( cstr === null )
            res.clear();
        else
            res.resize(StringRef.cStringLen(cstr));
        return res;
    }

    private var handle: @Byte;
}

package OsImpl
{
    fun[rtct, native("system")] system(x: @Char): Int;

    fun[rtct, native("fopen")] fopen(filename, mode: @Char): @Byte;
    fun[rtct, native("fclose")] fclose(handle: @Byte);
    fun[rtct, native("fflush")] fflush(handle: @Byte): Int;
    fun[rtct, native("feof")] feof(handle: @Byte): Int;
    fun[rtct, native("fgetc")] fgetc(handle: @Byte): Int;
    fun[rtct, native("fgets")] fgets(buffer: @Char, bufSize: Int, handle: @Byte): @Char;
    fun[rtct, native("fread")] fread(buffer: @Byte, size, count: UInt, handle: @Byte): UInt;
}

