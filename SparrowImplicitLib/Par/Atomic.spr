package Par;

import Config;
import "Atomic.llvm";

//! Type of integer value that is used as underlying type for an atomic word
using AtomicWordValue = Long;
//! An atomic word
//datatype AtomicWord = AtomicWordValue;
class[initCtor] AtomicWord
{
    private var value: AtomicWordValue;
}
fun =(lhs: @AtomicWord, rhs: AtomicWord) { lhs store (rhs load); }

//! Converts a regular value to an atomic word
//! Returns the reference to the same memory address
//! Used to make it possible to use atomic operations 
fun asAtomic(val: @AnyType): @AtomicWord
    = reinterpretCast(@AtomicWord, val)
    if typeOf(val) == AtomicWordValue;

//! Loads the value from an atomic word; returns a non-atomic value
fun[native("_AtomicWord_load")] load(x: @AtomicWord): AtomicWordValue;
//! Stores a value inside the given atomic word
fun[native("_AtomicWord_store")] store(x: @AtomicWord, newVal: AtomicWordValue);

//! Fetches the current value of an atomic word, and stores a new value in the atomic
fun[native("_AtomicWord_fetchAndStore")] fetchAndStore(x: @AtomicWord, newVal: AtomicWordValue): AtomicWordValue;

//! Compare the atomic word value with the given comparand; if equal store 'newVal' and return true; if not equal returns false
fun[native("_AtomicWord_compareAndSwap")] compareAndSwap(x: @AtomicWord, newVal, comparand: AtomicWordValue): Bool;

//! Fetch the value of the atomic, and then add the given value to it
fun[native("_AtomicWord_fetchAndAdd")] fetchAndAdd(x: @AtomicWord, val: AtomicWordValue): AtomicWordValue;
//! Fetch the value of the atomic and the increment it
fun fetchAndIncrement(x: @AtomicWord) = x fetchAndAdd 1;
//! Fetch the value of the atomic and the decrement it
fun fetchAndDecrement(x: @AtomicWord) = x fetchAndAdd -1;

//! Adds the given value to the atomic
fun += (x: @AtomicWord, val: AtomicWordValue) { x fetchAndAdd val; }
//! Subtracts the given value to the atomic
fun -= (x: @AtomicWord, val: AtomicWordValue) { x fetchAndAdd (-val); }

//! Increment the atomic word; returns the new value
fun pre_++(x: @AtomicWord): AtomicWordValue = (x fetchAndIncrement)+1;
//! Increment the atomic word; returns the old value
fun post_++(x: @AtomicWord): AtomicWordValue = (x fetchAndIncrement);

//! Decrement the atomic word; returns the new value
fun pre_--(x: @AtomicWord): AtomicWordValue = (x fetchAndDecrement)+1;
//! Decrement the atomic word; returns the old value
fun post_--(x: @AtomicWord): AtomicWordValue = (x fetchAndDecrement);

