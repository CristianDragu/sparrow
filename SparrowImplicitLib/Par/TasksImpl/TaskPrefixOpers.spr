package Par.TasksImpl;

import TaskPrefix;
import Assert;

// Reference counting (of the children)

public fun refCount(task: @TaskPrefix): Int = task.refCount load;

public fun setRefCount(task: @TaskPrefix, count: Int) { task.refCount = count; }
public fun addRefCount(task: @TaskPrefix, count: Int) { task.refCount += count; }
public fun incrementRefCount(task: @TaskPrefix) = ++task.refCount;
public fun decrementRefCount(task: @TaskPrefix) = --task.refCount;

public fun worker(task: @TaskPrefix): @Worker = reinterpretCast(@Worker, task.worker.get());
public fun waitingWorker(task: @TaskPrefix): @Worker = reinterpretCast(@Worker, task.waitingWorker.get());
public fun setWaitingWorker(task: @TaskPrefix, w: @Worker) { task.waitingWorker = reinterpretCast(@Byte, w); }

public fun assertValid(task: @TaskPrefix) {
    if[ct] ( isValidAndTrue(debugMode) ) {
        using ExecuteFnType = FunctionPtr(Null rt, @TaskPrefix);

        assert(task !== null);
        assert(task.executeFn != ExecuteFnType());
        assert(task.worker isSet);
    }
}
