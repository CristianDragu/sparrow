module Par.TasksImpl.Worker;

import Debug;
import TaskSystem;
import TaskQueue;
import Par.Tls;
import Par.Semaphore;
import Par.Atomic;

//! Class used to keep count of the number of threads that go idle
class IdleCounter {
    var cnt: Int Atomic;
}

fun goIdle(c: @IdleCounter) { c.cnt++; }
fun wakeUp(c: @IdleCounter) { c.cnt--; }
fun hasIdle(c: @IdleCounter) = (c.cnt load) > 0;
fun numIdleWorkers(c: @IdleCounter) = c.cnt load;


//! A worker class describes a thread that is doing some work on our task system
class Worker {
    var taskSystem: @TaskSystem;
    var work: TaskQueue;
    var workerId: Int;
    var curDepth: Int;

    //! The global counter that keeps track on how many internal threads are idle
    private var idleCounter: @IdleCounter;
    //! Non-zero if this thread has work to do
    private var isBusy: Int Atomic;
    //! Semaphore used when sleeping
    private var waitSem: Semaphore;

    fun ctor(taskSystem: @TaskSystem, workerId: Int, idleCounter: @IdleCounter) {
        this.taskSystem := taskSystem;
        this.workerId = workerId;
        this.curDepth = 0;
        this.idleCounter := idleCounter;
        this.isBusy store 0;
        this.waitSem ctor 0;
    }

    fun dtor {
    }

}

private var tlsWorker: Tls(@Worker);

fun localWorker: Worker Ptr {
    var worker: Worker Ptr = tlsWorker get;
    if ( worker isNull ) {
        worker = (getInitTaskSystem createWorker);
        tlsWorker = worker.get();
    }
    return worker;
}

fun setLocalWorker(worker: Worker Ptr) {
    tlsWorker = worker.get();
}

fun goIdle(w: @Worker) {
    if ( compareAndSwap(w.isBusy, 0, 1) ) {
        // Change the global counter
        w.idleCounter goIdle;

        if[ct] ( isValidAndTrue(traceCalls) )
            Tracer(w) << "going idle; we have " << (w.idleCounter.cnt load) << " idle workers" << endl;

        // Actually wake up the thread
        w.waitSem acquire;

        if[ct] ( isValidAndTrue(traceCalls) )
            Tracer(w) << "woke up; we have " << (w.idleCounter.cnt load) << " idle workers" << endl;
    }
}

fun tryWakeUp(w: @Worker): Bool {
    //if[ct] ( isValidAndTrue(traceCalls) )
    //    Tracer(w) << "trying to wake up; isBusy= " << (w.isBusy load) << endl;
    // If the thread was now busy, and we can set it to busy,
    // release the semaphore to wake up the thread
    if ( compareAndSwap(w.isBusy, 1, 0) ) {
        if[ct] ( isValidAndTrue(traceCalls) )
            Tracer(w) << "waking up; we have " << (w.idleCounter.cnt load) << " idle workers" << endl;

        w.waitSem release;

        // Make sure the counter will not count us anymore
        w.idleCounter wakeUp;
        return true;
    }
    return false;
}
