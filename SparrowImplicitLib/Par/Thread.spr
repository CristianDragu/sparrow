package Par;

import Config;
import SL.NewDelete;
import Assert;

//! Datatype describing a thread ID
public class ThreadId {
    var id: ULong;

    public fun ctor(id: ULong) {
        this.id ctor id;
    }
    public fun ctor(h: NativeThreadHandle) {
        this.id ctor;
        Impl.pthread_threadid_np(h, id);
    }
}
public fun >>(tid: @ThreadId, os: @OutStream)
{
    os << tid.id;
}



public class Thread
{
    private var handle: NativeThreadHandle;

    //! Construct the Thread with a functor
    //! The functor can have state, not just executing code
    public fun ctor(f: AnyType) if isValid(f()) {
        handle = Impl.startThread(f);
    }
    //! Destructor. Detatch the thread if joinable
    public fun dtor {
        if ( this isJoinable ) this detach;
    }

    //! Cannot copy construct or assign a Thread object
    private fun ctor(other: @Thread);
    private fun =(other: @Thread);

}

public fun >>(t: @Thread, os: @OutStream)
{
    if ( handle != NativeThreadHandle() )
        os << "Thread(" << handle << ")";
    else
        os << "Thread(null)";
}

//! Swap the content of two Thread objects
//public fun swap(lhs, rhs: @Thread) {
//    var tmp = lhs.handle swap rhs.handle;
//}

//! Test if the thread is joinable (e.g., still active);
public fun isJoinable(t: Thread) = t.handle != NativeThreadHandle();

//! Wait for the thread to finish
//! This shouldn't be called from the same thread
public fun join(t: @Thread) {
    assert(t isJoinable);
    assert((t getId) !== curThreadId);
    var res = Impl.pthread_join(t.handle, null);
    assert(res == 0);
    t.handle = NativeThreadHandle();
}

//! Detaches the given thread object from the actual thread of execution
//! The actual thread may continue to execute after this call
public fun detach(t: @Thread) {
    assert(t isJoinable);
    var res = Impl.pthread_detach(t.handle);
    assert(res == 0);
    t.handle = NativeThreadHandle();
}

//! Get the ID of the given thread
public fun getId(t: Thread): ThreadId = ThreadId(t.handle);

//! Get the native handle of the given thread
public fun getNativeHandle(t: Thread): NativeThreadHandle = t.handle;


//! Get the current thread id
public fun curThreadId: ThreadId = ThreadId(NativeThreadHandle());

//! Tries to suspend the current thread to let other threads execute
public fun yield = Impl.sched_yield();

//! Sleep the given amount of milliseconds
public fun sleep(durMs: UInt) {
    var req = Impl.TimeSpec(durMs/1000, (durMs%1000)*1000000);
    var rem = Impl.TimeSpec(0, 0);
    Impl.nanosleep(req, rem);
}

package Impl {
    using ThreadFun = FunctionPtr(@Byte rt, @Byte rt);

    class[initCtor] Closure(FType: Type) {
        var f: FType;

        fun[static] threadFun(arg: @Byte): @Byte {
            var self: @Closure = reinterpretCast(@Closure, arg);
            self.f();
            self delete;
            return null;
        }

        fun[static] getFunPtr: ThreadFun = \threadFun;
    }
    fun startThread(f: AnyType): NativeThreadHandle {
        using ClosureType = Closure(typeOf(f));
        var closurePtr: @ClosureType = new(ClosureType, f);
        var handle: NativeThreadHandle;
        var arg: @Byte = reinterpretCast(@Byte, closurePtr);
        var status = pthread_create(handle, null, ClosureType.getFunPtr, arg);
        return handle;
    }

    class[initCtor] TimeSpec { var tv_sec, tv_nsec: Long; }

    fun[native("pthread_create")] pthread_create(handle: @NativeThreadHandle, attr: @Byte, f: ThreadFun, arg: @Byte): Int;
    fun[native("pthread_join")] pthread_join(handle: NativeThreadHandle, valPtr: @ @Byte): Int;
    fun[native("pthread_detach")] pthread_detach(handle: NativeThreadHandle): Int;
    fun[native("pthread_self")] pthread_self: NativeThreadHandle;
    
    fun[native("pthread_threadid_np")] pthread_threadid_np(t: NativeThreadHandle, res: @ULong): Int;

    fun[native("sched_yield")] sched_yield;
    fun[native("nanosleep")] nanosleep(req, rem: @TimeSpec): Int;
}

