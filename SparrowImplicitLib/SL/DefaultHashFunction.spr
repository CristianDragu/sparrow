import Algorithms;
import Ranges;
import BitOper;
import String;

public class[rtct] DefaultHashFunction(type: Type)
{
    public fun ()(arg: @type) = defaultHash(arg);
}

public fun[rtct] defaultHash(arg: Char)        = HashImpl.doHash(Byte(arg), HashImpl.seed);
//public fun[rtct] defaultHash(arg: Integer)     = HashImpl.doHash(arg, HashImpl.seed);
public fun[rtct] defaultHash(arg: Integer)     = SizeType(arg);
public fun[rtct] defaultHash(arg: StringRef)   = HashImpl.doHash(arg, HashImpl.seed);
public fun[rtct] defaultHash(arg: @String)     = HashImpl.doHash(arg.asStringRef(), HashImpl.seed);

package HashImpl
{
    private var[ct] seed: SizeType = 0xfadef00d;

    /// FNV hash generator
    fun[rtct] doHash(key: StringRef, start: SizeType): SizeType
    {
        var hash = start;
        for ( i = 0..key.size() )
            hash = (hash !^! Byte(key(i))) * 0x01000193;
        return hash;
    }
    fun[rtct] doHash(value, start: SizeType): SizeType
    {
        return (start !^! value) * 0x01000193;
    }
}
