/// A container that may or may not store a value.
/// One can check whether the value is defined or not, and can access the value
public class Optional(valueType: Type)
{
    public using ValueType = valueType;
    
    public fun[noDefault] ctor
    {
        constructed ctor false;
        value ctor Uninitialized();
    }
    public fun[noDefault] ctor(other: @Optional)
    {
        constructed ctor other.constructed;
        if ( other.constructed )
            value ctor other.value;
    }
    public fun[noDefault] ctor(val: @ValueType)
    {
        constructed ctor true;
        value ctor val;
    }
    public fun[noDefault] dtor
    {
        reset();
    }

    public fun isNull                                      = !constructed;
    public fun isSet                                       = constructed;
    public fun get: @ValueType                             = value;
    public fun getOrElse(default: @ValueType): @ValueType  = ife(constructed, cast(@ValueType, value), default);
    
    public fun reset
    {
        if ( constructed )
            value dtor;
        constructed = false;
    }
    public fun reset(val: @ValueType)
    {
        if ( constructed )
            value dtor;
        value ctor val;
        constructed = true;
    }
    
    public fun swap(other: @Optional)
    {
        var tmp = this;
        this = other;
        other = this;
    }
    
    public fun =(other: @Optional)     { if ( other.constructed ) reset(other.value); else reset(); }
    public fun =(val: @ValueType)      { reset(val); }
    
    public fun ==(other: Optional)     = constructed == other.constructed && (!constructed || value == other.value);

    public fun >>(os: @OutStream) if isValid(os << #$ValueType)
    {
        if ( isSet() )
            os << "Optional(" << value << ")";
        else
            os << "Optional(none)";
        os << flush;
    }

    private var value: ValueType;
    private var constructed: Bool;
}

public fun some(x: @AnyType): -@typeOf(x) Optional = (-@typeOf(x) Optional)(x);
public fun none(t: Type) = (t Optional)();

