import SortedTable;

public class SortedSet(keyType, lessType, compareType: Type)
{
    public using KeyType = keyType;
    public using ValueType = keyType;
    public using LessType = lessType;
    public using CompareType = compareType;
    private using ImplTable = SortedTable(keyType, ValueType, Impl.Identity(keyType), lessType, compareType);
    public using RangeType = ImplTable.RangeType;

    private var sortedTable: ImplTable;

    public fun ctor(n: SizeType)                                       { sortedTable.ctor(n, LessType(), CompareType()); }
    public fun ctor(n: SizeType, less: LessType)                       { sortedTable.ctor(n, less, CompareType()); }
    public fun ctor(n: SizeType, less: LessType, comp: CompareType)    { sortedTable.ctor(n, less, comp); }
    public fun ctor(range: Range)                                      { sortedTable.ctor(range, 0, LessType(), CompareType()); }
    public fun ctor(range: Range, n: SizeType)                         { sortedTable.ctor(range, n, LessType(), CompareType()); }
    public fun ctor(range: Range, n: SizeType, less: LessType)         { sortedTable.ctor(range, n, less, CompareType()); }
    public fun ctor(range: Range, n: SizeType, less: LessType, comp: CompareType)  { sortedTable.ctor(range, n, less, comp); }
    public fun ctor(other: @SortedSet)                                 { this.sortedTable ctor other.sortedTable; }

    public fun lessFunction                            = sortedTable.less;
    public fun comparator                              = sortedTable.comp;

    public fun size                                    = sortedTable.size();
    public fun isEmpty                                 = sortedTable.isEmpty();
    public fun capacity                                = sortedTable.table.capacity();
    public fun reserve(n: SizeType)                    { sortedTable.reserve(n); }

    public fun all                                     = sortedTable.all();

    public fun insert(value: @ValueType)               = sortedTable.insert(value);
    public fun insert(range: Range)                    { sortedTable.insert(range); }
    public fun remove(key: @KeyType)                   { sortedTable.remove(key); }
    public fun remove(range: RangeType)                { sortedTable.remove(range); }

    public fun contains(key: @KeyType)                 = sortedTable.contains(key);
    public fun count(key: @KeyType)                    = sortedTable.count(key);
    public fun equalRange(key: @KeyType)               = sortedTable.equalRange(key);
    public fun lowerBound(key: @KeyType)               = sortedTable.lowerBound(key);
    public fun upperBound(key: @KeyType)               = sortedTable.upperBound(key);
    public fun find(key: @KeyType)                     = sortedTable.find(key);

    public fun clear()                                 { sortedTable.clear(); }

    public fun swap(other: @SortedSet)                 { this.sortedTable swap other.sortedTable; }
}

package Impl
{
    class Identity(type: Type)
    {
        fun () (val: type): type = val;
    }
}
