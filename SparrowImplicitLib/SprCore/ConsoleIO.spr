import StreamBasic;

public var[rtct] cout: ConsoleOutputStream;

public class[rtct] ConsoleOutputStream
{
    public fun <<<(x: Number)                          { Impl.write(x); }
    public fun <<<(x: Char)                            { Impl.write(x); }
    public fun <<<(x: Bool)                            { if ( x ) this <<< "true"; else this <<< "false"; }
    public fun <<<(x: StringRef)                       { Impl.writeCString(reinterpretCast(@Char, x.begin)); }

    // This stream supports flush
    public fun flush                                   { Impl.flushOutput(); }
}

public package Impl
{
    public fun[rtct, native("writeByte")] write(x: Byte);
    public fun[rtct, native("writeByte")] write(x: UByte);
    public fun[rtct, native("writeShort")] write(x: Short);
    public fun[rtct, native("writeShort")] write(x: UShort);
    public fun[rtct, native("writeInt")] write(x: Int);
    public fun[rtct, native("writeUInt")] write(x: UInt);
    public fun[rtct, native("writeLong")] write(x: Long);
    public fun[rtct, native("writeULong")] write(x: ULong);
    public fun[rtct, native("writeDouble")] write(x: Double);
    public fun[rtct, native("writeChar")] write(x: Char);
    public fun[rtct, native("writeULong")] write(x: SizeType);
    public fun[rtct, native("writeLong")] write(x: DiffType);

    public fun[rtct, native("writeStringImpl")] writeCString(x: @Char);

    public fun[rtct, native("writePointer")] writeRef(x: @Byte);
    public fun[rtct, native("flushOutput")] flushOutput;
}

