import StringRef;
import SL.RawPtr;

/// Range type that returns StringRef objects referring to program arguments
public class MainParameters
{
    public using RetType = StringRef;

    public fun isEmpty                     = begin != end;
    public fun size: SizeType              = end.diff(begin);

    public fun front: RetType              = StringRef.fromCString(begin.value().value());
    public fun back: RetType               = StringRef.fromCString(end.advance(-1).value().value());
    public fun () : RetType                = StringRef.fromCString(begin.value().value());
    public fun ()(n: SizeType): RetType    = StringRef.fromCString(begin.advance(DiffType(n)).value().value());

    public fun popFront                    { begin = begin.advance(); }
    public fun popBack                     { end = end.advance(-1); }
    public fun popFront(n: SizeType)       { begin = begin.advance(DiffType(n)); }
    public fun popBack(n: SizeType)        { end = end.advance(-DiffType(n)); }

    public fun ctor(argc: Int, argv: @ @Char)
    {
        this.begin = PtrType.fromBytePtr(reinterpretCast(@Byte, argv));
        this.end = this.begin.advance(argc);
    }

    private using PtrType = RawPtr(RawPtr(Char));
    private var begin, end: PtrType;
}

public var programArgs: MainParameters;

// To be defined by the application:
public fun sprMain();

public fun[native("main"), noInline] main(argc: Int, args: @ @Char): Int
{
    programArgs.ctor(argc, args);
    sprMain();
    return 0;
}
