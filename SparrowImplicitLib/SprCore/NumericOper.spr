import StdTypes;

public concept SmallInteger(x)
    if typeOf(x) == Byte
    || typeOf(x) == UByte
    || typeOf(x) == Short
    || typeOf(x) == UShort
     ;

public concept BigInteger(x)
    if typeOf(x) == Int
    || typeOf(x) == UInt
    || typeOf(x) == Long
    || typeOf(x) == ULong
    || typeOf(x) == SizeType
    || typeOf(x) == DiffType
     ;

public concept SignedInteger(x)
    if typeOf(x) == Byte
    || typeOf(x) == Short
    || typeOf(x) == Int
    || typeOf(x) == Long
    || typeOf(x) == DiffType
     ;

public concept UnsignedInteger(x)
    if typeOf(x) == UByte
    || typeOf(x) == UShort
    || typeOf(x) == UInt
    || typeOf(x) == ULong
    || typeOf(x) == SizeType
     ;

public concept Integer(x)
    if SmallInteger(x)
    || BigInteger(x);

public concept FloatingPointNumber(x)
    if typeOf(x) == Float
    || typeOf(x) == Double
     ;

public concept Number(x)
    if Integer(x)
    || FloatingPointNumber(x);


package NumOpImpl
{
    fun[autoCt] cmn(x, y: Number) = cast(commonType(typeOf(x), typeOf(y)), x);

    fun[autoCt, native("_Byte_opEQ")] opEq (x, y: Byte): Bool;
    fun[autoCt, native("_Byte_opNE")] opNe (x, y: Byte): Bool;
    fun[autoCt, native("_Byte_opLT")] opLt (x, y: Byte): Bool;
    fun[autoCt, native("_Byte_opGT")] opGt (x, y: Byte): Bool;
    fun[autoCt, native("_Byte_opLE")] opLe (x, y: Byte): Bool;
    fun[autoCt, native("_Byte_opGE")] opGe (x, y: Byte): Bool;
    fun[autoCt, native("_Byte_opPlus")] opPlus (x, y: Byte): Byte;
    fun[autoCt, native("_Byte_opMinus")] opMinus (x, y: Byte): Byte;
    fun[autoCt, native("_Byte_opMul")] opMul (x, y: Byte): Byte;
    fun[autoCt, native("_Byte_opDiv")] opDiv (x, y: Byte): Byte;
    fun[autoCt, native("_Byte_opMod")] opMod (x, y: Byte): Byte;

    fun[autoCt, native("_UByte_opEQ")] opEq (x, y: UByte): Bool;
    fun[autoCt, native("_UByte_opNE")] opNe (x, y: UByte): Bool;
    fun[autoCt, native("_UByte_opLT")] opLt (x, y: UByte): Bool;
    fun[autoCt, native("_UByte_opGT")] opGt (x, y: UByte): Bool;
    fun[autoCt, native("_UByte_opLE")] opLe (x, y: UByte): Bool;
    fun[autoCt, native("_UByte_opGE")] opGe (x, y: UByte): Bool;
    fun[autoCt, native("_UByte_opPlus")] opPlus (x, y: UByte): UByte;
    fun[autoCt, native("_UByte_opMinus")] opMinus (x, y: UByte): UByte;
    fun[autoCt, native("_UByte_opMul")] opMul (x, y: UByte): UByte;
    fun[autoCt, native("_UByte_opDiv")] opDiv (x, y: UByte): UByte;
    fun[autoCt, native("_UByte_opMod")] opMod (x, y: UByte): UByte;

    fun[autoCt, native("_Short_opEQ")] opEq (x, y: Short): Bool;
    fun[autoCt, native("_Short_opNE")] opNe (x, y: Short): Bool;
    fun[autoCt, native("_Short_opLT")] opLt (x, y: Short): Bool;
    fun[autoCt, native("_Short_opGT")] opGt (x, y: Short): Bool;
    fun[autoCt, native("_Short_opLE")] opLe (x, y: Short): Bool;
    fun[autoCt, native("_Short_opGE")] opGe (x, y: Short): Bool;
    fun[autoCt, native("_Short_opPlus")] opPlus (x, y: Short): Short;
    fun[autoCt, native("_Short_opMinus")] opMinus (x, y: Short): Short;
    fun[autoCt, native("_Short_opMul")] opMul (x, y: Short): Short;
    fun[autoCt, native("_Short_opDiv")] opDiv (x, y: Short): Short;
    fun[autoCt, native("_Short_opMod")] opMod (x, y: Short): Short;

    fun[autoCt, native("_UShort_opEQ")] opEq (x, y: UShort): Bool;
    fun[autoCt, native("_UShort_opNE")] opNe (x, y: UShort): Bool;
    fun[autoCt, native("_UShort_opLT")] opLt (x, y: UShort): Bool;
    fun[autoCt, native("_UShort_opGT")] opGt (x, y: UShort): Bool;
    fun[autoCt, native("_UShort_opLE")] opLe (x, y: UShort): Bool;
    fun[autoCt, native("_UShort_opGE")] opGe (x, y: UShort): Bool;
    fun[autoCt, native("_UShort_opPlus")] opPlus (x, y: UShort): UShort;
    fun[autoCt, native("_UShort_opMinus")] opMinus (x, y: UShort): UShort;
    fun[autoCt, native("_UShort_opMul")] opMul (x, y: UShort): UShort;
    fun[autoCt, native("_UShort_opDiv")] opDiv (x, y: UShort): UShort;
    fun[autoCt, native("_UShort_opMod")] opMod (x, y: UShort): UShort;

    fun[autoCt, native("_Int_opEQ")] opEq (x, y: Int): Bool;
    fun[autoCt, native("_Int_opNE")] opNe (x, y: Int): Bool;
    fun[autoCt, native("_Int_opLT")] opLt (x, y: Int): Bool;
    fun[autoCt, native("_Int_opGT")] opGt (x, y: Int): Bool;
    fun[autoCt, native("_Int_opLE")] opLe (x, y: Int): Bool;
    fun[autoCt, native("_Int_opGE")] opGe (x, y: Int): Bool;
    fun[autoCt, native("_Int_opPlus")] opPlus (x, y: Int): Int;
    fun[autoCt, native("_Int_opMinus")] opMinus (x, y: Int): Int;
    fun[autoCt, native("_Int_opMul")] opMul (x, y: Int): Int;
    fun[autoCt, native("_Int_opDiv")] opDiv (x, y: Int): Int;
    fun[autoCt, native("_Int_opMod")] opMod (x, y: Int): Int;

    fun[autoCt, native("_UInt_opEQ")] opEq (x, y: UInt): Bool;
    fun[autoCt, native("_UInt_opNE")] opNe (x, y: UInt): Bool;
    fun[autoCt, native("_UInt_opLT")] opLt (x, y: UInt): Bool;
    fun[autoCt, native("_UInt_opGT")] opGt (x, y: UInt): Bool;
    fun[autoCt, native("_UInt_opLE")] opLe (x, y: UInt): Bool;
    fun[autoCt, native("_UInt_opGE")] opGe (x, y: UInt): Bool;
    fun[autoCt, native("_UInt_opPlus")] opPlus (x, y: UInt): UInt;
    fun[autoCt, native("_UInt_opMinus")] opMinus (x, y: UInt): UInt;
    fun[autoCt, native("_UInt_opMul")] opMul (x, y: UInt): UInt;
    fun[autoCt, native("_UInt_opDiv")] opDiv (x, y: UInt): UInt;
    fun[autoCt, native("_UInt_opMod")] opMod (x, y: UInt): UInt;

    fun[autoCt, native("_Long_opEQ")] opEq (x, y: Long): Bool;
    fun[autoCt, native("_Long_opNE")] opNe (x, y: Long): Bool;
    fun[autoCt, native("_Long_opLT")] opLt (x, y: Long): Bool;
    fun[autoCt, native("_Long_opGT")] opGt (x, y: Long): Bool;
    fun[autoCt, native("_Long_opLE")] opLe (x, y: Long): Bool;
    fun[autoCt, native("_Long_opGE")] opGe (x, y: Long): Bool;
    fun[autoCt, native("_Long_opPlus")] opPlus (x, y: Long): Long;
    fun[autoCt, native("_Long_opMinus")] opMinus (x, y: Long): Long;
    fun[autoCt, native("_Long_opMul")] opMul (x, y: Long): Long;
    fun[autoCt, native("_Long_opDiv")] opDiv (x, y: Long): Long;
    fun[autoCt, native("_Long_opMod")] opMod (x, y: Long): Long;

    fun[autoCt, native("_ULong_opEQ")] opEq (x, y: ULong): Bool;
    fun[autoCt, native("_ULong_opNE")] opNe (x, y: ULong): Bool;
    fun[autoCt, native("_ULong_opLT")] opLt (x, y: ULong): Bool;
    fun[autoCt, native("_ULong_opGT")] opGt (x, y: ULong): Bool;
    fun[autoCt, native("_ULong_opLE")] opLe (x, y: ULong): Bool;
    fun[autoCt, native("_ULong_opGE")] opGe (x, y: ULong): Bool;
    fun[autoCt, native("_ULong_opPlus")] opPlus (x, y: ULong): ULong;
    fun[autoCt, native("_ULong_opMinus")] opMinus (x, y: ULong): ULong;
    fun[autoCt, native("_ULong_opMul")] opMul (x, y: ULong): ULong;
    fun[autoCt, native("_ULong_opDiv")] opDiv (x, y: ULong): ULong;
    fun[autoCt, native("_ULong_opMod")] opMod (x, y: ULong): ULong;

    fun[autoCt, native("_SizeType_opEQ")] opEq (x, y: SizeType): Bool;
    fun[autoCt, native("_SizeType_opNE")] opNe (x, y: SizeType): Bool;
    fun[autoCt, native("_SizeType_opLT")] opLt (x, y: SizeType): Bool;
    fun[autoCt, native("_SizeType_opGT")] opGt (x, y: SizeType): Bool;
    fun[autoCt, native("_SizeType_opLE")] opLe (x, y: SizeType): Bool;
    fun[autoCt, native("_SizeType_opGE")] opGe (x, y: SizeType): Bool;
    fun[autoCt, native("_SizeType_opPlus")] opPlus (x, y: SizeType): SizeType;
    fun[autoCt, native("_SizeType_opMinus")] opMinus (x, y: SizeType): SizeType;
    fun[autoCt, native("_SizeType_opMul")] opMul (x, y: SizeType): SizeType;
    fun[autoCt, native("_SizeType_opDiv")] opDiv (x, y: SizeType): SizeType;
    fun[autoCt, native("_SizeType_opMod")] opMod (x, y: SizeType): SizeType;

    fun[autoCt, native("_DiffType_opEQ")] opEq (x, y: DiffType): Bool;
    fun[autoCt, native("_DiffType_opNE")] opNe (x, y: DiffType): Bool;
    fun[autoCt, native("_DiffType_opLT")] opLt (x, y: DiffType): Bool;
    fun[autoCt, native("_DiffType_opGT")] opGt (x, y: DiffType): Bool;
    fun[autoCt, native("_DiffType_opLE")] opLe (x, y: DiffType): Bool;
    fun[autoCt, native("_DiffType_opGE")] opGe (x, y: DiffType): Bool;
    fun[autoCt, native("_DiffType_opPlus")] opPlus (x, y: DiffType): DiffType;
    fun[autoCt, native("_DiffType_opMinus")] opMinus (x, y: DiffType): DiffType;
    fun[autoCt, native("_DiffType_opMul")] opMul (x, y: DiffType): DiffType;
    fun[autoCt, native("_DiffType_opDiv")] opDiv (x, y: DiffType): DiffType;
    fun[autoCt, native("_DiffType_opMod")] opMod (x, y: DiffType): DiffType;

    fun[autoCt, native("_Float_opEQ")] opEq (x, y: Float): Bool;
    fun[autoCt, native("_Float_opNE")] opNe (x, y: Float): Bool;
    fun[autoCt, native("_Float_opLT")] opLt (x, y: Float): Bool;
    fun[autoCt, native("_Float_opGT")] opGt (x, y: Float): Bool;
    fun[autoCt, native("_Float_opLE")] opLe (x, y: Float): Bool;
    fun[autoCt, native("_Float_opGE")] opGe (x, y: Float): Bool;
    fun[autoCt, native("_Float_opPlus")] opPlus (x, y: Float): Float;
    fun[autoCt, native("_Float_opMinus")] opMinus (x, y: Float): Float;
    fun[autoCt, native("_Float_opMul")] opMul (x, y: Float): Float;
    fun[autoCt, native("_Float_opDiv")] opDiv (x, y: Float): Float;

    fun[autoCt, native("_Double_opEQ")] opEq (x, y: Double): Bool;
    fun[autoCt, native("_Double_opNE")] opNe (x, y: Double): Bool;
    fun[autoCt, native("_Double_opLT")] opLt (x, y: Double): Bool;
    fun[autoCt, native("_Double_opGT")] opGt (x, y: Double): Bool;
    fun[autoCt, native("_Double_opLE")] opLe (x, y: Double): Bool;
    fun[autoCt, native("_Double_opGE")] opGe (x, y: Double): Bool;
    fun[autoCt, native("_Double_opPlus")] opPlus (x, y: Double): Double;
    fun[autoCt, native("_Double_opMinus")] opMinus (x, y: Double): Double;
    fun[autoCt, native("_Double_opMul")] opMul (x, y: Double): Double;
    fun[autoCt, native("_Double_opDiv")] opDiv (x, y: Double): Double;
}

public fun[autoCt] == (x, y: Number)   = NumOpImpl.opEq(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] != (x, y: Number)   = NumOpImpl.opNe(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] < (x, y: Number)    = NumOpImpl.opLt(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] > (x, y: Number)    = NumOpImpl.opGt(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] <= (x, y: Number)   = NumOpImpl.opLe(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] >= (x, y: Number)   = NumOpImpl.opGe(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] + (x, y: Number)    = NumOpImpl.opPlus(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] - (x, y: Number)    = NumOpImpl.opMinus(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] * (x, y: Number)    = NumOpImpl.opMul(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] / (x, y: Number)    = NumOpImpl.opDiv(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));
public fun[autoCt] % (x, y: Integer)   = NumOpImpl.opMod(NumOpImpl.cmn(x,y), NumOpImpl.cmn(y,x));


// Unary +
public fun[autoCt, native("_Byte_opPlus1")] + (x: Byte): Byte;
public fun[autoCt, native("_UByte_opPlus1")] + (x: UByte): UByte;
public fun[autoCt, native("_Short_opPlus1")] + (x: Short): Short;
public fun[autoCt, native("_UShort_opPlus1")] + (x: UShort): UShort;
public fun[autoCt, native("_Int_opPlus1")] + (x: Int): Int;
public fun[autoCt, native("_UInt_opPlus1")] + (x: UInt): UInt;
public fun[autoCt, native("_Long_opPlus1")] + (x: Long): Long;
public fun[autoCt, native("_ULong_opPlus1")] + (x: ULong): ULong;
public fun[autoCt, native("_SizeType_opPlus1")] + (x: SizeType): SizeType;
public fun[autoCt, native("_DiffType_opPlus1")] + (x: DiffType): DiffType;
public fun[autoCt, native("_Float_opPlus1")] + (x: Float): Float;
public fun[autoCt, native("_Double_opPlus1")] + (x: Double): Double;

// Unary - (only for signed types)
public fun[autoCt, native("_Byte_opMinus1")] - (x: Byte): Byte;
public fun[autoCt, native("_Short_opMinus1")] - (x: Short): Short;
public fun[autoCt, native("_Int_opMinus1")] - (x: Int): Int;
public fun[autoCt, native("_Long_opMinus1")] - (x: Long): Long;
public fun[autoCt, native("_DiffType_opMinus1")] - (x: DiffType): DiffType;
public fun[autoCt, native("_Float_opMinus1")] - (x: Float): Float;
public fun[autoCt, native("_Double_opMinus1")] - (x: Double): Double;
