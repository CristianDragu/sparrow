import StdTypes0;
import StringRef;

class[native("i1"), noDefault, rtct] Bool
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_1")] ctor();
    fun[native("_ass_1_1")] ctor(src: Bool);
    fun dtor {}

    fun[autoCt, native("_ass_1_1")] = (y: Bool): Bool;
}

class[native("i8"), noDefault, rtct] Byte
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_8")] ctor();
    fun[native("_ass_8_8")] ctor(src: Byte);
    fun[native("_ass_8_8")] ctor(src: Char);
    fun[native("_ass_8_8"), convert] ctor(src: UByte);
    fun[native("_ass_8_16")] ctor(src: Short);
    fun[native("_ass_8_16")] ctor(src: UShort);
    fun[native("_ass_8_32")] ctor(src: Int);
    fun[native("_ass_8_32")] ctor(src: UInt);
    fun[native("_ass_8_64")] ctor(src: Long);
    fun[native("_ass_8_64")] ctor(src: ULong);
    fun[native("_ass_8_64")] ctor(src: SizeType);
    fun[native("_ass_8_64")] ctor(src: DiffType);
    fun[native("_ass_i8_f")] ctor(src: Float);
    fun[native("_ass_i8_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_8_8")] = (y: Byte);
}

class[native("u8"), noDefault, rtct] UByte
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_8")] ctor();
    fun[native("_ass_8_8"), convert] ctor(src: Byte);
    fun[native("_ass_8_8")] ctor(src: UByte);
    fun[native("_ass_8_16")] ctor(src: Short);
    fun[native("_ass_8_16")] ctor(src: UShort);
    fun[native("_ass_8_32")] ctor(src: Int);
    fun[native("_ass_8_32")] ctor(src: UInt);
    fun[native("_ass_8_64")] ctor(src: Long);
    fun[native("_ass_8_64")] ctor(src: ULong);
    fun[native("_ass_8_64")] ctor(src: SizeType);
    fun[native("_ass_8_64")] ctor(src: DiffType);
    fun[native("_ass_u8_f")] ctor(src: Float);
    fun[native("_ass_u8_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_8_8")] = (y: UByte);
}

class[native("i16"), noDefault, rtct] Short
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_16")] ctor();
    fun[native("_ass_16_8s"), convert] ctor(src: Byte);
    fun[native("_ass_16_8z"), convert] ctor(src: UByte);
    fun[native("_ass_16_16")] ctor(src: Short);
    fun[native("_ass_16_16"), convert] ctor(src: UShort);
    fun[native("_ass_16_32")] ctor(src: Int);
    fun[native("_ass_16_32")] ctor(src: UInt);
    fun[native("_ass_16_64")] ctor(src: Long);
    fun[native("_ass_16_64")] ctor(src: ULong);
    fun[native("_ass_16_64")] ctor(src: SizeType);
    fun[native("_ass_16_64")] ctor(src: DiffType);
    fun[native("_ass_i16_f")] ctor(src: Float);
    fun[native("_ass_i16_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_16_16")] = (y: Short);
}

class[native("u16"), noDefault, rtct] UShort
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_16")] ctor();
    fun[native("_ass_16_8z"), convert] ctor(src: Byte);
    fun[native("_ass_16_8z"), convert] ctor(src: UByte);
    fun[native("_ass_16_16"), convert] ctor(src: Short);
    fun[native("_ass_16_16")] ctor(src: UShort);
    fun[native("_ass_16_32")] ctor(src: Int);
    fun[native("_ass_16_32")] ctor(src: UInt);
    fun[native("_ass_16_64")] ctor(src: Long);
    fun[native("_ass_16_64")] ctor(src: ULong);
    fun[native("_ass_16_64")] ctor(src: SizeType);
    fun[native("_ass_16_64")] ctor(src: DiffType);
    fun[native("_ass_u16_f")] ctor(src: Float);
    fun[native("_ass_u16_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_16_16")] = (y: UShort);
}

class[native("i32"), noDefault, rtct] Int
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_32")] ctor();
    fun[native("_ass_32_8s"), convert] ctor(src: Byte);
    fun[native("_ass_32_8z"), convert] ctor(src: UByte);
    fun[native("_ass_32_16s"), convert] ctor(src: Short);
    fun[native("_ass_32_16z"), convert] ctor(src: UShort);
    fun[native("_ass_32_32")] ctor(src: Int);
    fun[native("_ass_32_32"), convert] ctor(src: UInt);
    fun[native("_ass_32_64")] ctor(src: Long);
    fun[native("_ass_32_64")] ctor(src: ULong);
    fun[native("_ass_32_64")] ctor(src: SizeType);
    fun[native("_ass_32_64")] ctor(src: DiffType);
    fun[native("_ass_i32_f")] ctor(src: Float);
    fun[native("_ass_i32_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_32_8z")] ctor(src: Char);

    fun[native("_ass_32_32")] = (y: Int);
}

class[native("u32"), noDefault, rtct] UInt
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_32")] ctor();
    fun[native("_ass_32_8z"), convert] ctor(src: Byte);
    fun[native("_ass_32_8z"), convert] ctor(src: UByte);
    fun[native("_ass_32_16z"), convert] ctor(src: Short);
    fun[native("_ass_32_16z"), convert] ctor(src: UShort);
    fun[native("_ass_32_32"), convert] ctor(src: Int);
    fun[native("_ass_32_32")] ctor(src: UInt);
    fun[native("_ass_32_64")] ctor(src: Long);
    fun[native("_ass_32_64")] ctor(src: ULong);
    fun[native("_ass_32_64")] ctor(src: SizeType);
    fun[native("_ass_32_64")] ctor(src: DiffType);
    fun[native("_ass_u32_f")] ctor(src: Float);
    fun[native("_ass_u32_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_32_32")] = (y: UInt);
}

class[native("i64"), noDefault, rtct] Long
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_64")] ctor();
    fun[native("_ass_64_8s"), convert] ctor(src: Byte);
    fun[native("_ass_64_8z"), convert] ctor(src: UByte);
    fun[native("_ass_64_16s"), convert] ctor(src: Short);
    fun[native("_ass_64_16z"), convert] ctor(src: UShort);
    fun[native("_ass_64_32s"), convert] ctor(src: Int);
    fun[native("_ass_64_32z"), convert] ctor(src: UInt);
    fun[native("_ass_64_64")] ctor(src: Long);
    fun[native("_ass_64_64"), convert] ctor(src: ULong);
    fun[native("_ass_64_64"), convert] ctor(src: SizeType);
    fun[native("_ass_64_64"), convert] ctor(src: DiffType);
    fun[native("_ass_i64_f")] ctor(src: Float);
    fun[native("_ass_i64_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_64_64")] = (y: Long);
}

class[native("u64"), noDefault, rtct] ULong
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_64")] ctor();
    fun[native("_ass_64_8z"), convert] ctor(src: Byte);
    fun[native("_ass_64_8z"), convert] ctor(src: UByte);
    fun[native("_ass_64_16z"), convert] ctor(src: Short);
    fun[native("_ass_64_16z"), convert] ctor(src: UShort);
    fun[native("_ass_64_32z"), convert] ctor(src: Int);
    fun[native("_ass_64_32z"), convert] ctor(src: UInt);
    fun[native("_ass_64_64"), convert] ctor(src: Long);
    fun[native("_ass_64_64")] ctor(src: ULong);
    fun[native("_ass_64_64"), convert] ctor(src: SizeType);
    fun[native("_ass_64_64"), convert] ctor(src: DiffType);
    fun[native("_ass_u64_f")] ctor(src: Float);
    fun[native("_ass_u64_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_64_64")] = (y: ULong);
}

class[native("u64"), noDefault, rtct] SizeType
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_64")] ctor();
    fun[native("_ass_64_8z"), convert] ctor(src: Byte);
    fun[native("_ass_64_8z"), convert] ctor(src: UByte);
    fun[native("_ass_64_16z"), convert] ctor(src: Short);
    fun[native("_ass_64_16z"), convert] ctor(src: UShort);
    fun[native("_ass_64_32z"), convert] ctor(src: Int);
    fun[native("_ass_64_32z"), convert] ctor(src: UInt);
    fun[native("_ass_64_64"), convert] ctor(src: Long);
    fun[native("_ass_64_64"), convert] ctor(src: ULong);
    fun[native("_ass_64_64")] ctor(src: SizeType);
    fun[native("_ass_64_64"), convert] ctor(src: DiffType);
    fun[native("_ass_u64_f")] ctor(src: Float);
    fun[native("_ass_u64_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_64_64")] = (y: SizeType);
}

//var NullPos = SizeType(DiffType(-1));

class[native("i64"), noDefault, rtct] DiffType
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_64")] ctor();
    fun[native("_ass_64_8s"), convert] ctor(src: Byte);
    fun[native("_ass_64_8z"), convert] ctor(src: UByte);
    fun[native("_ass_64_16s"), convert] ctor(src: Short);
    fun[native("_ass_64_16z"), convert] ctor(src: UShort);
    fun[native("_ass_64_32s"), convert] ctor(src: Int);
    fun[native("_ass_64_32z"), convert] ctor(src: UInt);
    fun[native("_ass_64_64"), convert] ctor(src: Long);
    fun[native("_ass_64_64"), convert] ctor(src: ULong);
    fun[native("_ass_64_64"), convert] ctor(src: SizeType);
    fun[native("_ass_64_64")] ctor(src: DiffType);
    fun[native("_ass_i64_f")] ctor(src: Float);
    fun[native("_ass_i64_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_64_64")] = (y: DiffType);
}

class[native("float"), noDefault, rtct] Float
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_f")] ctor();
    fun[native("_ass_f_i8"), convert] ctor(src: Byte);
    fun[native("_ass_f_u8"), convert] ctor(src: UByte);
    fun[native("_ass_f_i16"), convert] ctor(src: Short);
    fun[native("_ass_f_u16"), convert] ctor(src: UShort);
    fun[native("_ass_f_i32"), convert] ctor(src: Int);
    fun[native("_ass_f_u32"), convert] ctor(src: UInt);
    fun[native("_ass_f_i64"), convert] ctor(src: Long);
    fun[native("_ass_f_u64"), convert] ctor(src: ULong);
    fun[native("_ass_f_i64"), convert] ctor(src: SizeType);
    fun[native("_ass_f_u64"), convert] ctor(src: DiffType);
    fun[native("_ass_f_f")] ctor(src: Float);
    fun[native("_ass_f_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_f_f")] = (y: Float);
}

class[native("double"), noDefault, rtct] Double
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_d")] ctor();
    fun[native("_ass_d_i8"), convert] ctor(src: Byte);
    fun[native("_ass_d_u8"), convert] ctor(src: UByte);
    fun[native("_ass_d_i16"), convert] ctor(src: Short);
    fun[native("_ass_d_u16"), convert] ctor(src: UShort);
    fun[native("_ass_d_i32"), convert] ctor(src: Int);
    fun[native("_ass_d_u32"), convert] ctor(src: UInt);
    fun[native("_ass_d_i64"), convert] ctor(src: Long);
    fun[native("_ass_d_u64"), convert] ctor(src: ULong);
    fun[native("_ass_d_i64"), convert] ctor(src: SizeType);
    fun[native("_ass_d_u64"), convert] ctor(src: DiffType);
    fun[native("_ass_d_f"), convert] ctor(src: Float);
    fun[native("_ass_d_d")] ctor(src: Double);
    fun dtor {}

    fun[native("_ass_d_d")] = (y: Double);
}

class[native("i8"), noDefault, rtct] Char
{
    fun ctor(other: Uninitialized) {}
    fun[native("_zero_init_8")] ctor();
    fun[native("_ass_8_8")] ctor(src: Char);
    fun[native("_ass_8_8")] ctor(src: Byte);
    fun[native("_ass_8_8")] ctor(src: UByte);
    fun[native("_ass_8_16")] ctor(src: Short);
    fun[native("_ass_8_16")] ctor(src: UShort);
    fun[native("_ass_8_32")] ctor(src: Int);
    fun[native("_ass_8_32")] ctor(src: UInt);
    fun[native("_ass_8_64")] ctor(src: Long);
    fun[native("_ass_8_64")] ctor(src: ULong);
    fun[native("_ass_8_64")] ctor(src: SizeType);
    fun[native("_ass_8_64")] ctor(src: DiffType);
    fun dtor {}

    fun[native("_ass_8_8")] = (y: Char);
}

fun[autoCt, native("$logicalOr")] || (x, y: Bool): Bool;
fun[autoCt, native("$logicalAnd")] && (x, y: Bool): Bool;
fun[autoCt, native("_Bool_opXor")] ^^ (x, y: Bool): Bool;
fun[autoCt, native("_Bool_opEQ")] == (x, y: Bool): Bool;
fun[autoCt, native("_Bool_opNE")] != (x, y: Bool): Bool;
fun[autoCt, native("_Bool_opNeg")] ! (x: Bool): Bool;

fun[autoCt, native("_Char_opEQ")] == (x, y: Char): Bool;
fun[autoCt, native("_Char_opNE")] != (x, y: Char): Bool;
fun[autoCt, native("_Char_opLT")] < (x, y: Char): Bool;
fun[autoCt, native("_Char_opGT")] > (x, y: Char): Bool;
fun[autoCt, native("_Char_opLE")] <= (x, y: Char): Bool;
fun[autoCt, native("_Char_opGE")] >= (x, y: Char): Bool;

