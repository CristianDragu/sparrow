import "bitOper.llvm";
//import precedenceUtils;

//using bitOperPrecedence = getOperPrecedence("*") + 100;
using bitOperPrecedence = oper_precedence_* + 100;

//setOperPrecedence("!|!", bitOperPrecedence);
//setOperPrecedence("!^!", bitOperPrecedence+10);
//setOperPrecedence("!&!", bitOperPrecedence+20);
//setOperPrecedence("!<<!", bitOperPrecedence+30);
//setOperPrecedence("!>>!", bitOperPrecedence+30);
using oper_precedence_!|! = bitOperPrecedence;
using oper_precedence_!^! = bitOperPrecedence+10;
using oper_precedence_!&! = bitOperPrecedence+20;
using oper_precedence_!<<! = bitOperPrecedence+30;
using oper_precedence_!>>! = bitOperPrecedence+30;

[autoCt, native("_bit_neg_8")] fun pre_!~!(n: Byte): Byte;
[autoCt, native("_bit_shl_8")] fun !<<!(n, k: Byte): Byte;
[autoCt, native("_bit_ashr_8")] fun !>>!(n, k: Byte): Byte;
[autoCt, native("_bit_xor_8")] fun !^!(n1, n2: Byte): Byte;
[autoCt, native("_bit_or_8")] fun !|!(n1, n2: Byte): Byte;
[autoCt, native("_bit_and_8")] fun !&!(n1, n2: Byte): Byte;

[autoCt, native("_bit_neg_8")] fun pre_!~!(n: UByte): UByte;
[autoCt, native("_bit_shl_8")] fun !<<!(n, k: UByte): UByte;
[autoCt, native("_bit_lshr_8")] fun !>>!(n, k: UByte): UByte;
[autoCt, native("_bit_xor_8")] fun !^!(n1, n2: UByte): UByte;
[autoCt, native("_bit_or_8")] fun !|!(n1, n2: UByte): UByte;
[autoCt, native("_bit_and_8")] fun !&!(n1, n2: UByte): UByte;

[autoCt, native("_bit_neg_16")] fun pre_!~!(n: Short): Short;
[autoCt, native("_bit_shl_16")] fun !<<!(n, k: Short): Short;
[autoCt, native("_bit_ashr_16")] fun !>>!(n, k: Short): Short;
[autoCt, native("_bit_xor_16")] fun !^!(n1, n2: Short): Short;
[autoCt, native("_bit_or_16")] fun !|!(n1, n2: Short): Short;
[autoCt, native("_bit_and_16")] fun !&!(n1, n2: Short): Short;

[autoCt, native("_bit_neg_16")] fun pre_!~!(n: UShort): UShort;
[autoCt, native("_bit_shl_16")] fun !<<!(n, k: UShort): UShort;
[autoCt, native("_bit_lshr_16")] fun !>>!(n, k: UShort): UShort;
[autoCt, native("_bit_xor_16")] fun !^!(n1, n2: UShort): UShort;
[autoCt, native("_bit_or_16")] fun !|!(n1, n2: UShort): UShort;
[autoCt, native("_bit_and_16")] fun !&!(n1, n2: UShort): UShort;

[autoCt, native("_bit_neg_32")] fun pre_!~!(n: Int): Int;
[autoCt, native("_bit_shl_32")] fun !<<!(n, k: Int): Int;
[autoCt, native("_bit_ashr_32")] fun !>>!(n, k: Int): Int;
[autoCt, native("_bit_xor_32")] fun !^!(n1, n2: Int): Int;
[autoCt, native("_bit_or_32")] fun !|!(n1, n2: Int): Int;
[autoCt, native("_bit_and_32")] fun !&!(n1, n2: Int): Int;

[autoCt, native("_bit_neg_32")] fun pre_!~!(n: UInt): UInt;
[autoCt, native("_bit_shl_32")] fun !<<!(n, k: UInt): UInt;
[autoCt, native("_bit_lshr_32")] fun !>>!(n, k: UInt): UInt;
[autoCt, native("_bit_xor_32")] fun !^!(n1, n2: UInt): UInt;
[autoCt, native("_bit_or_32")] fun !|!(n1, n2: UInt): UInt;
[autoCt, native("_bit_and_32")] fun !&!(n1, n2: UInt): UInt;

[autoCt, native("_bit_neg_64")] fun pre_!~!(n: Long): Long;
[autoCt, native("_bit_shl_64")] fun !<<!(n, k: Long): Long;
[autoCt, native("_bit_ashr_64")] fun !>>!(n, k: Long): Long;
[autoCt, native("_bit_xor_64")] fun !^!(n1, n2: Long): Long;
[autoCt, native("_bit_or_64")] fun !|!(n1, n2: Long): Long;
[autoCt, native("_bit_and_64")] fun !&!(n1, n2: Long): Long;

[autoCt, native("_bit_neg_64")] fun pre_!~!(n: ULong): ULong;
[autoCt, native("_bit_shl_64")] fun !<<!(n, k: ULong): ULong;
[autoCt, native("_bit_lshr_64")] fun !>>!(n, k: ULong): ULong;
[autoCt, native("_bit_xor_64")] fun !^!(n1, n2: ULong): ULong;
[autoCt, native("_bit_or_64")] fun !|!(n1, n2: ULong): ULong;
[autoCt, native("_bit_and_64")] fun !&!(n1, n2: ULong): ULong;

[autoCt, native("_bit_neg_64")] fun pre_!~!(n: SizeType): SizeType;
[autoCt, native("_bit_shl_64")] fun !<<!(n, k: SizeType): SizeType;
[autoCt, native("_bit_ashr_64")] fun !>>!(n, k: SizeType): SizeType;
[autoCt, native("_bit_xor_64")] fun !^!(n1, n2: SizeType): SizeType;
[autoCt, native("_bit_or_64")] fun !|!(n1, n2: SizeType): SizeType;
[autoCt, native("_bit_and_64")] fun !&!(n1, n2: SizeType): SizeType;

[autoCt, native("_bit_neg_64")] fun pre_!~!(n: DiffType): DiffType;
[autoCt, native("_bit_shl_64")] fun !<<!(n, k: DiffType): DiffType;
[autoCt, native("_bit_lshr_64")] fun !>>!(n, k: DiffType): DiffType;
[autoCt, native("_bit_xor_64")] fun !^!(n1, n2: DiffType): DiffType;
[autoCt, native("_bit_or_64")] fun !|!(n1, n2: DiffType): DiffType;
[autoCt, native("_bit_and_64")] fun !&!(n1, n2: DiffType): DiffType;
