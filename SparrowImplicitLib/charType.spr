fun[rtct] isAlnum(c: Char) = 0 != Impl.isalnum(Int(c));
fun[rtct] isAlpha(c: Char) = 0 != Impl.isalpha(Int(c));
fun[rtct] isBlank(c: Char) = 0 != Impl.isblank(Int(c));
fun[rtct] isCntrl(c: Char) = 0 != Impl.iscntrl(Int(c));
fun[rtct] isDigit(c: Char) = 0 != Impl.isdigit(Int(c));
fun[rtct] isGraph(c: Char) = 0 != Impl.isgraph(Int(c));
fun[rtct] isLower(c: Char) = 0 != Impl.islower(Int(c));
fun[rtct] isPrint(c: Char) = 0 != Impl.isprint(Int(c));
fun[rtct] isPunct(c: Char) = 0 != Impl.ispunct(Int(c));
fun[rtct] isSpace(c: Char) = 0 != Impl.isspace(Int(c));
fun[rtct] isUpper(c: Char) = 0 != Impl.isupper(Int(c));
fun[rtct] isXdigit(c: Char) = 0 != Impl.isxdigit(Int(c));

package Impl
{
    fun[rtct, native("isalnum")] isalnum(c: Int): Int;
    fun[rtct, native("isalpha")] isalpha(c: Int): Int;
    fun[rtct, native("isblank")] isblank(c: Int): Int;
    fun[rtct, native("iscntrl")] iscntrl(c: Int): Int;
    fun[rtct, native("isdigit")] isdigit(c: Int): Int;
    fun[rtct, native("isgraph")] isgraph(c: Int): Int;
    fun[rtct, native("islower")] islower(c: Int): Int;
    fun[rtct, native("isprint")] isprint(c: Int): Int;
    fun[rtct, native("ispunct")] ispunct(c: Int): Int;
    fun[rtct, native("isspace")] isspace(c: Int): Int;
    fun[rtct, native("isupper")] isupper(c: Int): Int;
    fun[rtct, native("isxdigit")] isxdigit(c: Int): Int;
}
