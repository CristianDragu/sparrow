[rtct] fun isAlnum(c: Char) = 0 != Impl.isalnum(Int(c));
[rtct] fun isAlpha(c: Char) = 0 != Impl.isalpha(Int(c));
[rtct] fun isBlank(c: Char) = 0 != Impl.isblank(Int(c));
[rtct] fun isCntrl(c: Char) = 0 != Impl.iscntrl(Int(c));
[rtct] fun isDigit(c: Char) = 0 != Impl.isdigit(Int(c));
[rtct] fun isGraph(c: Char) = 0 != Impl.isgraph(Int(c));
[rtct] fun isLower(c: Char) = 0 != Impl.islower(Int(c));
[rtct] fun isPrint(c: Char) = 0 != Impl.isprint(Int(c));
[rtct] fun isPunct(c: Char) = 0 != Impl.ispunct(Int(c));
[rtct] fun isSpace(c: Char) = 0 != Impl.isspace(Int(c));
[rtct] fun isUpper(c: Char) = 0 != Impl.isupper(Int(c));
[rtct] fun isXdigit(c: Char) = 0 != Impl.isxdigit(Int(c));

package Impl
{
    [rtct, native("isalnum")] fun isalnum(c: Int): Int;
    [rtct, native("isalpha")] fun isalpha(c: Int): Int;
    [rtct, native("isblank")] fun isblank(c: Int): Int;
    [rtct, native("iscntrl")] fun iscntrl(c: Int): Int;
    [rtct, native("isdigit")] fun isdigit(c: Int): Int;
    [rtct, native("isgraph")] fun isgraph(c: Int): Int;
    [rtct, native("islower")] fun islower(c: Int): Int;
    [rtct, native("isprint")] fun isprint(c: Int): Int;
    [rtct, native("ispunct")] fun ispunct(c: Int): Int;
    [rtct, native("isspace")] fun isspace(c: Int): Int;
    [rtct, native("isupper")] fun isupper(c: Int): Int;
    [rtct, native("isxdigit")] fun isxdigit(c: Int): Int;
}
