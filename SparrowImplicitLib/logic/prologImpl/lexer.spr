import token;
import errorReporter;

class[rtct] Lexer(sourceType, errorReporterType: Type) if CharRange(#$sourceType)
{
    using TokenType = Token;
    using RetType = TokenType;

    fun ctor(source: @sourceType, errorReporter: @errorReporterType)
    {
        var startLoc: Location;
        startLoc setOne;
        this.ctor(source, errorReporter, startLoc);
    }

    fun ctor(source: @sourceType, errorReporter: @errorReporterType, startLoc: Location)
    {
        this.source ctor source;
        this.errorReporter ctor errorReporter;
        this.curToken ctor;
        this.curLocation ctor startLoc;

        curLocation setAsStartOf curLocation;

        // Read the first token
        this.curToken = getNextToken();
    }

    fun isEmpty             = source.isEmpty();
    fun front               = curToken;
    fun ()                  = curToken;

    fun popFront            { curToken = getNextToken(); }
    fun pre_++ : RetType    { popFront(); return curToken; }
    fun post_++ : RetType   { var res = curToken; popFront(); return res; }

    private fun getNextToken: Token
    {
        // The current location starts where the last one ended
        curLocation stepOver;

        // First check if the source is empty; if so, return an EOF token
        if ( source.isEmpty() )
            return Token(curLocation, tkEof);

        // Get the first character in the source
        var ch = source();

        // Check for whitespace
        if ( isSpace(ch) )
        {
            consumeWhiteSpace();    // Just drop it
            return getNextToken();  // Get the next token
        }

        // Check for comments
        if ( ch == '%' )
        {
            consumeLineComment();   // Just drop all characters until the end of line
            return getNextToken();  // Get the next token
        }


        if ( isAlnum(ch) )
        {
            // Check for numbers, variables and string atoms
            if ( isDigit(ch) )
            {
                var data = consumeNumber();
                return Token(curLocation, tkNumber, data);
            }
            else if ( isUpper(ch) )
            {
                var data = consumeIdentifier();
                return Token(curLocation, tkVar, data);
            }
            else
            {
                var data = consumeIdentifier();
                if ( data == String("is") )
                    return Token(curLocation, tkIs, data);
                return Token(curLocation, tkAtom, data);
            }
        }
        else if ( ch == '$' )
        {
            var data = consumeAntiQuote();
            return Token(curLocation, tkAntiQuote, data);
        }
        else
        {
            var chNext = advanceSource();
            if ( ch == '(' )
                return Token(curLocation, tkLParen);
            else if ( ch == ')' )
                return Token(curLocation, tkRParen);
            else if ( ch == '[' )
                return Token(curLocation, tkLBracket);
            else if ( ch == ']' )
                return Token(curLocation, tkRBracket);
            else if ( ch == '.' )
                return Token(curLocation, tkDot);
            else if ( ch == ',' )
                return Token(curLocation, tkComma);
            else if ( ch == '+' )
                return Token(curLocation, tkOpPlus);
            else if ( ch == '-' )
                return Token(curLocation, tkOpMinus);
            else if ( ch == '*' )
                return Token(curLocation, tkOpMul);
            else if ( ch == '/' )
                return Token(curLocation, tkOpDiv);
            else if ( ch == ':' && chNext == '-' )
            {
                advanceSource();
                return Token(curLocation, tkClause);
            }

        }

        var errMsg: String = "Invalid character found while parsing Prolog code: ";
        errMsg.append(ch);
        errorReporter.raiseError(curLocation, errMsg.asStringRef());
        return Token(curLocation, tkEof);
    }

    private fun consumeWhiteSpace
    {
        var ch = source();
        while ( !source.isEmpty() && isSpace(ch) )
            ch = advanceSource();
    }
    private fun consumeLineComment
    {
        var ch = source();
        while ( !source.isEmpty() && ch != '\n' )
            ch = advanceSource();
        if ( !source.isEmpty() )
            advanceSource();
    }
    private fun consumeNumber: String
    {
        var res: String;
        var ch = source();
        while ( !source.isEmpty() && isDigit(ch) )
        {
            res.pushBack(ch);
            ch = advanceSource();
        }
        return res;
    }
    private fun consumeIdentifier: String
    {
        var res: String;
        var ch = source();
        while ( !source.isEmpty() && isAlnum(ch) )
        {
            res.pushBack(ch);
            ch = advanceSource();
        }
        return res;
    }
    private fun consumeAntiQuote: String
    {
        var ch = advanceSource();
        if ( ch == '{' )
        {
            var res: String;
            var braces = 1;
            ch = advanceSource();
            curLocation stepOver;
            while ( !source.isEmpty() )
            {
                if ( source.isEmpty() )
                    errorReporter.raiseError(curLocation, "End of stream found inside anti-quotation");
                if ( ch == '}' )
                {
                    if ( --braces == 0 )
                    {
                        ch = advanceSource();
                        break;
                    }
                }

                res.pushBack(ch);

                if ( ch == '{' )
                    ++braces;
                ch = advanceSource();
            }
            return res;
        }
        else
        {
            curLocation stepOver;
            return consumeIdentifier();
        }
    }

    private fun advanceSource: Char
    {
        if ( source() == '\n' )
            curLocation addLines 1;
        else
            curLocation addColumns 1;
        source popFront;
        return source front;
    }

    private var source: sourceType;
    private var errorReporter: errorReporterType;
    private var curToken: Token;
    private var curLocation: Location;
}

fun[rtct] mkLexer(source: @CharRange, errorReporter: @AnyType) = Lexer(-@typeOf(source), -@typeOf(errorReporter))(source, errorReporter);
fun[rtct] mkLexer(source: @CharRange, errorReporter: @AnyType, startLoc: Location) = Lexer(-@typeOf(source), -@typeOf(errorReporter))(source, errorReporter, startLoc);
