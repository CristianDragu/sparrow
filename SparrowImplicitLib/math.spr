module math;

[native("llvm.sqrt.f32"), rtct] fun sqrt(x: Float): Float;
[native("llvm.sin.f32"), rtct] fun sin(x: Float): Float;
[native("llvm.cos.f32"), rtct] fun cos(x: Float): Float;
[native("llvm.powi.f32"), rtct] fun powi(x: Float, y: Int): Float;
[native("llvm.pow.f32"), rtct] fun pow(x, y: Float): Float;
[native("llvm.exp.f32"), rtct] fun exp(x: Float): Float;
[native("llvm.exp2.f32"), rtct] fun exp2(x: Float): Float;
[native("llvm.log.f32"), rtct] fun log(x: Float): Float;
[native("llvm.log10.f32"), rtct] fun log10(x: Float): Float;
[native("llvm.log2.f32"), rtct] fun log2(x: Float): Float;
[native("llvm.fabs.f32"), rtct] fun fabs(x: Float): Float;
[native("llvm.floor.f32"), rtct] fun floor(x: Float): Float;
[native("llvm.ceil.f32"), rtct] fun ceil(x: Float): Float;
[native("llvm.truc.f32"), rtct] fun truc(x: Float): Float;
[native("llvm.rint.f32"), rtct] fun rint(x: Float): Float;
[native("llvm.rint.f32"), rtct] fun nearbyint(x: Float): Float;

[native("llvm.sqrt.f64"), rtct] fun sqrt(x: Double): Double;
[native("llvm.sin.f64"), rtct] fun sin(x: Double): Double;
[native("llvm.cos.f64"), rtct] fun cos(x: Double): Double;
[native("llvm.powi.f64"), rtct] fun powi(x: Double, y: Int): Double;
[native("llvm.pow.f64"), rtct] fun pow(x, y: Double): Double;
[native("llvm.exp.f64"), rtct] fun exp(x: Double): Double;
[native("llvm.exp2.f64"), rtct] fun exp2(x: Double): Double;
[native("llvm.log.f64"), rtct] fun log(x: Double): Double;
[native("llvm.log10.f64"), rtct] fun log10(x: Double): Double;
[native("llvm.log2.f64"), rtct] fun log2(x: Double): Double;
[native("llvm.fabs.f64"), rtct] fun fabs(x: Double): Double;
[native("llvm.floor.f64"), rtct] fun floor(x: Double): Double;
[native("llvm.ceil.f64"), rtct] fun ceil(x: Double): Double;
[native("llvm.truc.f64"), rtct] fun truc(x: Double): Double;
[native("llvm.rint.f64"), rtct] fun rint(x: Double): Double;
[native("llvm.rint.f64"), rtct] fun nearbyint(x: Double): Double;

[rtct] fun abs(x: Integer) = ife(x<0, -x, x);
