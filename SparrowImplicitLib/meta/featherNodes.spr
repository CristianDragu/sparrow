[public] import compilerCore;

[ct, native("$meta.Feather.mkNodeList")] fun mkNodeList(loc: @Location, nodes: AstNodeRange = AstNodeRange(), voidResult: Bool = false): AstNode;
[ct, native("$meta.Feather.addToNodeList")] fun addToNodeList(list, newNode: AstNode): AstNode;
[ct, native("$meta.Feather.appendNodeList")] fun appendNodeList(main, newList: AstNode): AstNode;

[ct, native("$meta.Feather.mkNop")] fun mkNop(loc: @Location): AstNode;
[ct, native("$meta.Feather.mkTypeNode")] fun mkTypeNode(loc: @Location, type: AstType): AstNode;
[ct, native("$meta.Feather.mkBackendCode")] fun mkBackendCode(loc: @Location, code: StringRef, mode: Int): AstNode;
[ct, native("$meta.Feather.mkLocalSpace")] fun mkLocalSpace(loc: @Location, children: AstNodeRange): AstNode;
[ct, native("$meta.Feather.mkGlobalConstructAction")] fun mkGlobalConstructAction(loc: @Location, action: AstNode): AstNode;
[ct, native("$meta.Feather.mkGlobalDestructAction")] fun mkGlobalDestructAction(loc: @Location, action: AstNode): AstNode;
[ct, native("$meta.Feather.mkScopeDestructAction")] fun mkScopeDestructAction(loc: @Location, action: AstNode): AstNode;
[ct, native("$meta.Feather.mkTempDestructAction")] fun mkTempDestructAction(loc: @Location, action: AstNode): AstNode;

[ct, native("$meta.Feather.mkFunction")] fun mkFunction(loc: @Location, name: StringRef, resType: AstNode, params: @AstNodeRange, body: AstNode, mode: Int): AstNode;
[ct, native("$meta.Feather.mkClass")] fun mkClass(loc: @Location, name: StringRef, fields: @AstNodeRange, mode: Int): AstNode;
[ct, native("$meta.Feather.mkVar")] fun mkVar(loc: @Location, name: StringRef, type: AstNode, mode: Int): AstNode;

[ct, native("$meta.Feather.mkCtValue")] fun mkCtValue(loc: @Location, type: AstType, data: StringRef): AstNode;
[ct, native("$meta.Feather.mkNull")] fun mkNull(loc: @Location, typeNode: AstNode): AstNode;
[ct, native("$meta.Feather.mkVarRef")] fun mkVarRef(loc: @Location, varDecl: AstNode): AstNode;
[ct, native("$meta.Feather.mkFieldRef")] fun mkFieldRef(loc: @Location, obj, fieldDecl: AstNode): AstNode;
[ct, native("$meta.Feather.mkFunRef")] fun mkFunRef(loc: @Location, funDecl: AstNode, resType: AstNode): AstNode;
[ct, native("$meta.Feather.mkFunCall")] fun mkFunCall(loc: @Location, funDecl: AstNode, args: @AstNode): AstNode;
[ct, native("$meta.Feather.mkMemLoad")] fun mkMemLoad(loc: @Location, exp: AstNode): AstNode;
[ct, native("$meta.Feather.mkMemStore")] fun mkMemStore(loc: @Location, value, address: AstNode): AstNode;
[ct, native("$meta.Feather.mkBitcast")] fun mkBitcast(loc: @Location, destType: AstNode, node: AstNode): AstNode;
[ct, native("$meta.Feather.mkConditional")] fun mkConditional(loc: @Location, condition, alt1, alt2: AstNode): AstNode;

[ct, native("$meta.Feather.mkIf")] fun mkIf(loc: @Location, condition, thenClause, elseClause: AstNode, isCt: Bool = false): AstNode;
[ct, native("$meta.Feather.mkWhile")] fun mkWhile(loc: @Location, condition, body, step: AstNode, isCt: Bool = false): AstNode;
[ct, native("$meta.Feather.mkBreak")] fun mkBreak(loc: Location): AstNode;
[ct, native("$meta.Feather.mkContinue")] fun mkContinue(loc: Location): AstNode;
[ct, native("$meta.Feather.mkReturn")] fun mkReturn(loc: @Location, exp: AstNode = AstNode()): AstNode;
