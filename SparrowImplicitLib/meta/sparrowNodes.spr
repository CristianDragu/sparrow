[public] import compilerCore;

[ct, native("$meta.Sparrow.mkModifiers")] fun mkModifiers(loc: @Location, main, mods: AstNode): AstNode;

[ct, native("$meta.Sparrow.mkModule")] fun mkModule(loc: @Location, moduleName, declarations: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkImportName")] fun mkImportName(loc: @Location, moduleName, importedDeclNames: AstNode, alias: StringRef): AstNode;
[ct, native("$meta.Sparrow.mkSprUsing")] fun mkSprUsing(loc: @Location, alias: StringRef, usingNode: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkSprPackage")] fun mkSprPackage(loc: @Location, name: StringRef, children: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkSprVariable")] fun mkSprVariable(loc: @Location, name: StringRef, typeNode, init: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkSprClass")] fun mkSprClass(loc: @Location, name: StringRef, parameters, baseClasses, ifClause, children: AstNode): AstNode;

[ct, native("$meta.Sparrow.mkSprConcept")] fun mkSprConcept(loc: @Location, name: StringRef, paramName: StringRef, baseConcept, ifClause: AstNode): AstNode;

[ct, native("$meta.Sparrow.mkSprFunction")] fun mkSprFunction(loc: @Location, name: StringRef, parmeters, returnType, body, ifClause: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkSprFunctionExp")] fun mkSprFunctionExp(loc: @Location, name: StringRef, parameters, returnType, bodyExp, ifClause: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkSprParameter")] fun mkSprParameter(loc: @Location, name: StringRef, typeNode, init: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkSprAutoParameter")] fun mkSprAutoParameter(loc: @Location, name: StringRef): AstNode;

[ct, native("$meta.Sparrow.mkIdentifier")] fun mkIdentifier(loc: @Location, id: StringRef): AstNode;
[ct, native("$meta.Sparrow.mkCompoundExp")] fun mkCompoundExp(loc: @Location, base: AstNode, id: StringRef): AstNode;
[ct, native("$meta.Sparrow.mkStarExp")] fun mkStarExp(loc: @Location, base: AstNode, operName: StringRef): AstNode;
[ct, native("$meta.Sparrow.mkPostfixOp")] fun mkPostfixOp(loc: @Location, op: StringRef, base: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkInfixOp")] fun mkInfixOp(loc: @Location, op: StringRef, arg1, arg2: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkPrefixOp")] fun mkPrefixOp(loc: @Location, op: StringRef, base: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkFunApplication")] fun mkFunApplication(loc: @Location, base, arguments: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkOperatorCall")] fun mkOperatorCall(loc: @Location, arg1: AstNode, op: StringRef, arg2: AstNode): AstNode;

[ct, native("$meta.Sparrow.mkConditionalExp")] fun mkConditionalExp(loc: @Location, cond, alt1, alt2: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkThisExp")] fun mkThisExp(loc: Location): AstNode;
[ct, native("$meta.Sparrow.mkParenthesisExp")] fun mkParenthesisExp(loc: @Location, exp: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkIntLiteral")] fun mkIntLiteral(loc: @Location, value: Int): AstNode;
[ct, native("$meta.Sparrow.mkUIntLiteral")] fun mkUIntLiteral(loc: @Location, value: UInt): AstNode;
[ct, native("$meta.Sparrow.mkLongLiteral")] fun mkLongLiteral(loc: @Location, value: Long): AstNode;
[ct, native("$meta.Sparrow.mkULongLiteral")] fun mkULongLiteral(loc: @Location, value: ULong): AstNode;
[ct, native("$meta.Sparrow.mkFloatLiteral")] fun mkFloatLiteral(loc: @Location, value: Float): AstNode;
[ct, native("$meta.Sparrow.mkDoubleLiteral")] fun mkDoubleLiteral(loc: @Location, value: Double): AstNode;
[ct, native("$meta.Sparrow.mkCharLiteral")] fun mkCharLiteral(loc: @Location, value: Char): AstNode;
[ct, native("$meta.Sparrow.mkStringLiteral")] fun mkStringLiteral(loc: @Location, value: StringRef): AstNode;
[ct, native("$meta.Sparrow.mkNullLiteral")] fun mkNullLiteral(loc: Location): AstNode;
[ct, native("$meta.Sparrow.mkBoolLiteral")] fun mkBoolLiteral(loc: @Location, value: Bool): AstNode;
[ct, native("$meta.Sparrow.mkLambdaExp")] fun mkLambdaExp(loc: @Location, parameters, returnType, body, bodyExp, closureParams: AstNode): AstNode;

[ct, native("$meta.Sparrow.mkExpressionStmt")] fun mkExpressionStmt(loc: @Location, exp: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkBlockStmt")] fun mkBlockStmt(loc: @Location, statements: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkIfStmt")] fun mkIfStmt(loc: @Location, cond, thenClause, elseClause: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkForStmt")] fun mkForStmt(loc: @Location, name: StringRef, type, range, action: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkWhileStmt")] fun mkWhileStmt(loc: @Location, cond, step, action: AstNode): AstNode;
[ct, native("$meta.Sparrow.mkBreakStmt")] fun mkBreakStmt(loc: Location): AstNode;
[ct, native("$meta.Sparrow.mkContinueStmt")] fun mkContinueStmt(loc: Location): AstNode;
[ct, native("$meta.Sparrow.mkReturnStmt")] fun mkReturnStmt(loc: @Location, exp: AstNode): AstNode;
