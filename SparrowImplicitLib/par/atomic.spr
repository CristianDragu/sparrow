module par.atomic;

import config;
import "atomic.llvm";

class[initCtor] Atomic(T: Type) if T == Int {
    using _IsAtomicType = true;
    using ValueType = Int;

    //! The value for this atomic
    private var value: ValueType;
}

class[initCtor] Atomic(T: Type) if T == Long {
    using _IsAtomicType = true;
    using ValueType = Long;

    //! The value for this atomic
    private var value: ValueType;
}

class Atomic(T: Type) if T != Int && T != Long && sizeOf(T) <= 8 {
    using _IsAtomicType = true;

    using ValueType = T;

    private using UnderlyingType = Impl.AtomicTypeTraits(T).UnderlyingType;
    private using BaseAtomicType = Impl.AtomicTypeTraits(T).BaseAtomicType;

    private fun toUnderlying(val: T): UnderlyingType {
        var res: UnderlyingType;
        reinterpretCast(@T, res) = val;
        return res;
    }
    private fun fromUnderlying(val: UnderlyingType): T {
        var res: T;
        res = reinterpretCast(@T, val);
        return res;
    }
    private fun baseAtomic: @BaseAtomicType = reinterpretCast(@BaseAtomicType, this);

    //! The value for this atomic
    private var value: UnderlyingType;

    fun ctor(v: ValueType) {
        value construct toUnderlying(v);
    }
}

using AtomicInt = Atomic(Int);
using AtomicLong = Atomic(Long);

concept AtomicType(x) if x._IsAtomicType;
concept AtomicInteger(x) if x._IsAtomicType && Integer(#$x.ValueType);
concept NonStdAtomicType(x) if x._IsAtomicType && x.ValueType != x.UnderlyingType;

fun =(lhs: @AtomicType, rhs: AtomicType) { lhs store (rhs load); }

//! Converts a regular value to an atomic value
//! Returns the reference to the same memory address
//! Used to make it possible to use atomic operations 
fun asAtomic(val: @AnyType): @Atomic(typeOf(val))
    = reinterpretCast(@Atomic(typeOf(val)), val)
    if sizeOf(val) == sizeOf(Atomic(typeOf(val)));

//! Loads the value from an atomic; returns a non-atomic value
fun[native("_Atomic_load32")] load(x: @AtomicInt): Int;
fun[native("_Atomic_load64")] load(x: @AtomicLong): Long;
fun load(x: @NonStdAtomicType): x.ValueType
    = x.fromUnderlying(x.baseAtomic load);

//! Stores a value inside the given atomic
fun[native("_Atomic_store32")] store(x: @AtomicInt, newVal: Int);
fun[native("_Atomic_store64")] store(x: @AtomicLong, newVal: Long);
fun store(x: @NonStdAtomicType, newVal: AnyType)
    { x.baseAtomic store x.toUnderlying(newVal); }

//! Stores a value inside the given atomic, using the assignment operator
fun =(x: @AtomicType, val: AnyType) = store(x, val);

//! Fetches the current value of an atomic, and stores a new value in the atomic
fun[native("_Atomic_fetchAndStore32")] fetchAndStore(x: @AtomicInt, newVal: Int): Int;
fun[native("_Atomic_fetchAndStore64")] fetchAndStore(x: @AtomicLong, newVal: Long): Long;
fun fetchAndStore(x: @NonStdAtomicType, newVal: AnyType): x.ValueType
    = x.fromUnderlying(x.baseAtomic fetchAndStore x.toUnderlying(newVal));

//! Compare the atomic value with the given comparand; if equal store 'newVal' and return true; if not equal returns false
fun[native("_Atomic_compareAndSwap32")] compareAndSwap(x: @AtomicInt, newVal, comparand: Int): Bool;
fun[native("_Atomic_compareAndSwap64")] compareAndSwap(x: @AtomicLong, newVal, comparand: Long): Bool;
fun compareAndSwap(x: @NonStdAtomicType, newVal, comparand: AnyType): Bool
    = compareAndSwap(x.baseAtomic, x.toUnderlying(newVal), x.toUnderlying(comparand));

//! Fetch the value of the atomic, and then add the given value to it
fun[native("_Atomic_fetchAndAdd32")] fetchAndAdd(x: @AtomicInt, val: Int): Int;
fun[native("_Atomic_fetchAndAdd64")] fetchAndAdd(x: @AtomicLong, val: Long): Long;
fun fetchAndAdd(x: @NonStdAtomicType, val: AnyType): x.ValueType
    = x.fromUnderlying(x.baseAtomic fetchAndAdd x.toUnderlying(val))
    if Integer(#$x.ValueType);

//! Fetch the value of the atomic and the increment it
fun fetchAndIncrement(x: @AtomicInteger) = x fetchAndAdd 1;
//! Fetch the value of the atomic and the decrement it
fun fetchAndDecrement(x: @AtomicInteger) = x fetchAndAdd -1;

//! Adds the given value to the atomic
fun += (x: @AtomicInteger, val: AnyType) { x fetchAndAdd val; }
//! Subtracts the given value to the atomic
fun -= (x: @AtomicInteger, val: AnyType) { x fetchAndAdd (-val); }

//! Increment the atomic value; returns the new value
fun pre_++(x: @AtomicInteger): x.ValueType = (x fetchAndIncrement)+1;
//! Increment the atomic value; returns the old value
fun post_++(x: @AtomicInteger): x.ValueType = (x fetchAndIncrement);

//! Decrement the atomic value; returns the new value
fun pre_--(x: @AtomicInteger): x.ValueType = (x fetchAndDecrement)-1;
//! Decrement the atomic value; returns the old value
fun post_--(x: @AtomicInteger): x.ValueType = (x fetchAndDecrement);

package Impl {
    class AtomicTypeTraits(T: Type) if sizeOf(T) <= 4 {
        using UnderlyingType = Int;
        using BaseAtomicType = Atomic(Int);
    }
    class AtomicTypeTraits(T: Type) if sizeOf(T) == 8 {
        using UnderlyingType = Long;
        using BaseAtomicType = Atomic(Long);
    }

    fun packAtomic(x: @NonStdAtomicType): @AtomicTypeTraits(x.ValueType)
        = reinterpretCast(@AtomicTypeTraits(x.ValueType), x);

    fun pack(x: @NonStdAtomicType, val: AnyType): AtomicTypeTraits(x.ValueType).UnderlyingType {
        var res: AtomicTypeTraits(x.ValueType).UnderlyingType;
        reinterpretCast(@AtomicTypeTraits(x.ValueType).UnderlyingType, res) = val;
        return res;
    }
    fun unpack(x: @NonStdAtomicType, val: AnyType): x.ValueType {
        var res: x.ValueType;
        res = reinterpretCast(@AtomicTypeTraits(x.ValueType).UnderlyingType, val);
        return res;
    }
}