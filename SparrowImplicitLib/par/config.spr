module par.config

import std.compilerInfo
import std.ptr

[ct] if platformName == "Linux"
    datatype NativeThreadHandle = ULong
else
    datatype NativeThreadHandle = Byte Ptr  // Opaque type

    fun >>(h: NativeThreadHandle, os: @OutStream)
        if ( h.impl.isSet )
            os << mkStreamRefWrapper(h.impl.get)
        else
            os << "null"

    using InvalidThreadHandle = NativeThreadHandle()    

//! Get the number of available logical CPU cores for our process
//! This dictates how much parallelism we have to be exploit
fun getAvailableCoresNum(): UInt
    var maxProcs: Long = _Impl.sysconf(_Impl._SC_NPROCESSORS_ONLN)

    return ife(maxProcs < 1, UInt(1), UInt(maxProcs))
    // TODO: also consider process affinity

package _Impl

    [ct] if platformName == "Darwin"
        using _SC_NPROCESSORS_ONLN = 58
    else
        using _SC_NPROCESSORS_ONLN = 84

    [native("sysconf")] fun sysconf(name: Int): Long
