import basicDecls(Char, Byte, Int, SizeType, DiffType, StringRef, Null, typeOf, reinterpretCast, sizeOf, ptrAdd, ptrSub, ptrDiff, fromCString, *)

/// Range type that returns StringRef objects referring to program arguments
class MainParameters
    using RetType = StringRef

    var _begin, _end: _Impl.CStrPtr

    fun ctor(this: @MainParameters, argc: Int, argv: @ @Char)
        this._begin = (_Impl.fromArgvPtr(argv))
        this._end = (this._begin + argc)

fun isEmpty(this: MainParameters)                      = this.size == 0
fun size(this: MainParameters): SizeType               = _end - _begin

fun front(this: MainParameters): RetType               = _begin toStringRef
fun back(this: MainParameters): RetType                = _end - 1 toStringRef
fun ()(this: MainParameters) : RetType                 = _begin toStringRef
fun ()(this: MainParameters, n: SizeType): RetType     = _begin + n toStringRef

fun popFront(this: @MainParameters)                    { _begin = (_begin + 1); }
fun popBack(this: @MainParameters)                     { _end = (_end - 1); }
fun popFront(this: @MainParameters, n: SizeType)       { _begin = (_begin + n); }
fun popBack(this: @MainParameters, n: SizeType)        { _end = (_end - n); }

package _Impl
    class CStr { var cstr: @Char; }
    [initCtor] class CStrPtr { var ptr: @CStr; }

    fun fromArgvPtr(argv: @ @Char): CStrPtr = CStrPtr(reinterpretCast(@CStr, argv))
    fun fromBytePtr(p: @Byte): CStrPtr = CStrPtr(reinterpretCast(@CStr, p))
    fun toBytePtr(p: CStrPtr): @Byte = reinterpretCast(@Byte, p.ptr)
    fun +(p: CStrPtr, n: SizeType): CStrPtr = fromBytePtr( ptrAdd(toBytePtr(p), n*(sizeOf(CStrPtr))) )
    fun -(p: CStrPtr, n: SizeType): CStrPtr = fromBytePtr( ptrSub(toBytePtr(p), n*(sizeOf(CStrPtr))) )
    fun -(p, q: CStrPtr): SizeType = ptrDiff(toBytePtr(p), toBytePtr(q)) / (sizeOf(CStrPtr))

    fun toStringRef(p: CStrPtr): StringRef = fromCString(p.ptr.cstr)

var programArgs: MainParameters

// To be defined by the application:
fun sprMain

// The "main" function will be declared in 'mainImpl.spr'
