import sprCore.basicDecls(AnyType, Number, Char, Bool, StringRef, Byte, Int, Double, Null, isValid, &&, !, oper_precedence___fapp__, oper_precedence___dot__, typeOf, reinterpretCast);

// An output stream must accept the basic types
concept OutStream(x)
    if isValid(x.<<<(1))
    //&& isValid(x.<<<(1L))
    && isValid(x.<<<(1.0))
    && isValid(x.<<<('c'))
    && isValid(x.<<<("string"))
    ;

// If we define an ">>" operator in the type itself, make sure we can support the standard "<<" notation
[rtct] fun << (s: @OutStream, x: @AnyType): typeOf(s) if isValid(x >> s)
{
    x >> s;
    return s;
}

// If no ">>" operator is defined in the class, then try to place the input element in the stream
// The stream class must define an "<<<" operator for this element
[rtct] fun << (s: @OutStream, x: @AnyType): typeOf(s) if !isValid(x.>>(s)) && isValid(s.<<<(x))
{
    s.<<<(x);
    return s;
}


[rtct] var endl: EndLineHelperClass;
[rtct] var flush: FlushHelperClass;

[rtct] class EndLineHelperClass
{
    fun >>(os: @OutStream)
    {
        os << '\n';
    }
}
[rtct] class FlushHelperClass
{
    fun >>(os: @OutStream)
    {
        [ct] if ( isValid(os.flush()) )
            os.flush();
    }
}

[rtct] class StreamRefWrapperHelperClass
{
    var ptr: @Byte;
}
[rtct] fun >>(p: StreamRefWrapperHelperClass, os: @OutStream) {
    _Impl.writeRef(p.ptr);
}

[rtct] fun mkStreamRefWrapper(x: @AnyType): StreamRefWrapperHelperClass
{
    var res: StreamRefWrapperHelperClass;
    res.ptr := reinterpretCast(@Byte, x);
    return res;
}

package _Impl
{
    [rtct, native("writePointer")] fun writeRef(x: @Byte);
}
