module std.algorithms;

import tuple(Tuple, ~);
import ranges;

concept Swappable(x) if isValid(x.swap(x));

fun max(value1: @AnyType, value2: @AnyType): typeOf(value1)
{
    if ( value1 < value2 )
        return value2;
    return value1;
}

fun min(value1: @AnyType, value2: @AnyType): typeOf(value1)
{
    if ( value2 < value1 )
        return value2;
    return value1;
}

fun max(value1: @AnyType, value2: @AnyType, pred: AnyType): typeOf(value1)
{
    if ( pred(value1, value2) )
        return value2;
    return value1;
}

fun min(value1: @AnyType, value2: @AnyType, pred: AnyType): typeOf(value1)
{
    if ( pred(value2, value1) )
        return value2;
    return value1;
}

[autoCt] fun swap(a, b: @AnyType) if typeOf(a) == typeOf(b) && !Swappable(a)
{
    var tmp = a;
    a = b;
    b = tmp;
}
[autoCt] fun swap(a, b: @Swappable) if typeOf(a) == typeOf(b)
{
    a.swap(b);
}

[autoCt] fun swapTL(a, b: @AnyType) { swap(a, b); }

[rtct] fun find(range: AnyType, value: @AnyType): typeOf(range)
{
    while ( !range.isEmpty() && !(range.front() == value) )
        range.popFront();

    return range;
}

// TODO (LucTeo): Check why the previous function doesn't work well in RTCT mode
[rtct] fun find2(range: AnyType, value: AnyType): typeOf(range)
{
    while ( !range.isEmpty() && !(range.front() == value) )
        range.popFront();

    return range;
}

[rtct] fun findIf(r: Range, pred: AnyType): typeOf(r) if typeOf(pred(*r)) == Bool
{
    while ( !!r && !pred(*r) )
        ++r;
    return r;
}
//[rtct] fun findIf(r: Range, pred: AnyType): typeOf(r) if typeOf(pred(r.front())) == Bool
//{
//    while ( !r.isEmpty() && !pred(r.front()) )
//        r.popFront();
//    return r;
//}

fun findFirstOf(range1, range2: Range): typeOf(range1)
{
    while ( !range1.isEmpty() ; range1.popFront() )
        for ( val = range2 )
            if  ( range1.front() == val )
                return range1;

    return range1;
}

fun findFirstOfIf(range1, range2: Range, pred: AnyType): typeOf(range1)
{
    while ( !range1.isEmpty() ; range1.popFront() )
        for ( val = range2 )
            if ( pred(range1.front(), val) )
                return range1;

    return range1;
}

fun count(range: AnyType, value: @AnyType): SizeType
{
    var n: SizeType = 0;
    for ( v = range )
        if ( v == value )
            ++n;
    return n;
}

fun countIf(range: AnyType, pred: AnyType): SizeType
{
    var n: SizeType = 0;
    for ( v = range )
        if ( pred(v) )
            ++n;
    return n;
}

fun equal(range1: AnyType, range2: AnyType): Bool
{
    while ( !range1.isEmpty() && !range2.isEmpty() && range1.front() == range2.front() )
    {
        range1.popFront();
        range2.popFront();
    }

    if ( range1.isEmpty() )
        return true;
    else
        return false;
}

fun equalIf(range1: AnyType, range2: AnyType, pred: AnyType): Bool
{
    while ( !range1.isEmpty() && !range2.isEmpty() && pred(range1.front(), range2.front()) )
    {
        range1.popFront();
        range2.popFront();
    }

    if ( range1.isEmpty() )
        return true;
    else
        return false;
}

fun findRange(range1: AnyType, range2: AnyType): typeOf(range1)
{
    if ( range1.isEmpty() || range2.isEmpty() )
        return range1;

    var tmp = range2;

    tmp.popFront();

    if ( tmp.isEmpty() )
        return find(range1, range2.front());

    while ( !range1.isEmpty() )
    {
        var r1 = range1;
        var r2 = range2;

        while ( !r1.isEmpty() && !r2.isEmpty() && r1.front() == r2.front() )
        {
            r1.popFront();
            r2.popFront();
        }

        if ( r2.isEmpty() )
            return range1;

        range1.popFront();
    }

    return range1;
}

fun findRangeIf(range1: AnyType, range2: AnyType, pred: AnyType): typeOf(range1)
{
    if ( range1.isEmpty() || range2.isEmpty() )
        return range1;

    while ( !range1.isEmpty() )
    {
        var r1 = range1;
        var r2 = range2;

        while ( !r1.isEmpty() && !r2.isEmpty() && pred(r1.front(), r2.front()) )
        {
            r1.popFront();
            r2.popFront();
        }

        if ( r2.isEmpty() )
            return range1;

        range1.popFront();
    }

    return range1;
}

fun indexOfRange(range1: AnyType, range2: AnyType): SizeType
{
    if ( range1.isEmpty() || range2.isEmpty() )
        return SizeType(DiffType(-1));

    var tmp = range2;

    tmp.popFront();

    if ( tmp.isEmpty() )
        return indexOf(range1, range2.front());

    var k = 0;

    while ( !range1.isEmpty() )
    {
        var r1 = range1;
        var r2 = range2;

        while ( !r1.isEmpty() && !r2.isEmpty() && r1.front() == r2.front() )
        {
            r1.popFront();
            r2.popFront();
        }

        if ( r2.isEmpty() )
            return k;

        range1.popFront();
        k = k + 1;
    }

    return SizeType(DiffType(-1));
}

fun minElement(range: Range): typeOf(range)
{
    if ( range.isEmpty() )
        return range;

    var res = range;

    range.popFront();
    while ( !range.isEmpty() ; range.popFront() )
        if ( range.front() < res.front() )
            res = range;

    return res;
}

fun minElementIf(range: Range, pred: AnyType): typeOf(range)
{
    if ( range.isEmpty() )
        return range;

    var res = range;

    range.popFront();
    while ( !range.isEmpty() ; range.popFront() )
        if ( pred(range.front(), res.front()) )
            res = range;

    return res;
}

fun maxElement(range: Range): typeOf(range)
{
    if ( range.isEmpty() )
        return range;

    var res = range;

    range.popFront();
    while ( !range.isEmpty() ; range.popFront() )
        if ( res.front() < range.front() )
            res = range;

    return res;
}

fun maxElementIf(range: Range, pred: AnyType): typeOf(range)
{
    if ( range.isEmpty() )
        return range;

    var res = range;

    range.popFront();
    while ( !range.isEmpty() ; range.popFront() )
        if ( pred(res.front(), range.front()) )
            res = range;

    return res;
}

[rtct] fun minMaxElement(range: Range): Tuple(typeOf(range), typeOf(range))
{
    if ( range.isEmpty() )
        return range ~ range;

    var minRes = range;
    var maxRes = range;

    range.popFront();
    while ( !range.isEmpty() )
    {
        if ( minRes.front() < range.front() )
            minRes = range;
        else if ( range.front() < maxRes.front() )
            maxRes = range;
        range.popFront();
    }

    return minRes ~ maxRes;
}

[rtct] fun minMaxElementIf(range: Range, pred: AnyType): Tuple(typeOf(range), typeOf(range))
{
    if ( range.isEmpty() )
        return range ~ range;

    var minRes = range;
    var maxRes = range;

    range.popFront();
    while ( !range.isEmpty() )
    {
        if ( pred(minRes.front(), range.front()) )
            minRes = range;
        else if ( pred(range.front(), maxRes.front()) )
            maxRes = range;
        range.popFront();
    }

    return minRes ~ maxRes;
}

fun compare(range1: AnyType, range2: AnyType): Bool
{
    while ( !range1.isEmpty() && !range2.isEmpty() )
    {
        if ( !(range1.front() < range2.front()) )
            return false;

        range1.popFront();
        range2.popFront();
    }

    if ( range2.isEmpty() )
        return false;
    return true;
}

fun compare(range1: AnyType, range2: AnyType, pred: AnyType): Bool
{
    while ( !range1.isEmpty() && !range2.isEmpty() )
    {
        if ( !pred(range1.front(), range2.front()) )
            return false;

        range1.popFront();
        range2.popFront();
    }

    if ( range2.isEmpty() )
        return false;
    return true;
}

fun isSorted(range: AnyType): Bool
{
    if ( range.isEmpty() )
        return true;

    var next = range;

    next.popFront();
    while ( !next.isEmpty() )
    {
        if ( next.front() < range.front() )
            return false;

        range = next;
        next.popFront();
    }

    return true;
}

fun isSorted(range: AnyType, pred: AnyType): Bool
{
    if ( range.isEmpty() )
        return true;

    var next = range;

    next.popFront();
    while ( !next.isEmpty() )
    {
        if ( pred(next.front(), range.front()) )
            return false;

        range = next;
        next.popFront();
    }

    return true;
}

[rtct] fun indexOf(range: Range, value: @AnyType): SizeType
{
    var n: SizeType = 0;

    for ( v = range )
    {
        if ( v == value )
            return n;
        ++n;
    }

    return SizeType(DiffType(-1));
}

[rtct] fun indexOfIf(range: Range, pred: AnyType): SizeType
{
    var n: SizeType = 0;

    for ( v = range )
    {
        if ( pred(v) )
            return n;
        ++n;
    }

    return SizeType(DiffType(-1));
}

fun foldLeft(range: AnyType, function: AnyType, seed: @AnyType): -@typeOf(seed)
{
    var t = seed;
    for ( v = range )
        t = function(t, v);
    return t;
}

fun foldRight(range: AnyType, function: AnyType, seed: @AnyType): -@typeOf(seed)
{
    var t = seed;

    while ( !range.isEmpty() ; range.popBack() )
        t = function(t, range.back());

    return t;
}

//[rtct] fun copy(r1, r2: Range): typeOf(r2) if isValid(*r2 = *r1)
[rtct] fun copy(r1, r2: Range): typeOf(r2) if isValid(r2.front() = r1.front())
{
    while ( (!!r1) && (!!r2) )
    {
        *r2 = *r1;
        ++r1;
        ++r2;
    }
    return r2;
}
//[rtct] fun copy(range1: AnyType, range2: AnyType): typeOf(range2)
//{
//    while ( !range1.isEmpty() && !range2.isEmpty() )
//    {
//        range2.front() = range1.front();
//        range1.popFront();
//        range2.popFront();
//    }

//    return range2;
//}

fun replace(range: Range, oldValue: @AnyType, newValue: @AnyType) //if TypeOp.isRef(typeOf(range.RetType))
{
    for ( v = range )
        if ( v == oldValue )
            v = newValue;
}

fun replaceIf(range: Range, pred: AnyType, newValue: @AnyType) //if TypeOp.isRef(typeOf(range.RetType))
{
    for ( v = range )
        if ( pred(v) )
            v = newValue;
}

fun reverse(range: AnyType)
{
    while ( true )
    {
        if ( range.isEmpty() )
            return;

        var t: range.RetType = range.back();

        range.popBack();

        if ( range.isEmpty() )
            return;

        var tmp = range.front();

        range.front() = t;
        t = tmp;
        range.popFront();
    }
}

[rtct] fun merge(range1: AnyType, range2: AnyType, range3: AnyType): typeOf(range3)
{
    while ( !range1.isEmpty() && !range2.isEmpty() )
    {
        if ( range2.front() < range1.front() )
        {
            range3.front() = range2.front();
            range2.popFront();
        }
        else
        {
            range3.front() = range1.front();
            range1.popFront();
        }
        range3.popFront();
    }

    return copy(range2, copy(range1, range3));
}

[rtct] fun merge(range1: AnyType, range2: AnyType, range3: AnyType, pred: AnyType): typeOf(range3)
{
    while ( !range1.isEmpty() && !range2.isEmpty() )
    {
        if ( pred(range2.front(), range1.front()) )
        {
            range3.front() = range2.front();
            range2.popFront();
        }
        else
        {
            range3.front() = range1.front();
            range1.popFront();
        }
        range3.popFront();
    }

    return copy(range2, copy(range1, range3));
}

[rtct] fun sort(range: AnyType)
{
    if ( !range.isEmpty() )
        quickSort(range, 0, rangeSize(range) - 1);
}

[rtct] fun mergeSort(range: AnyType)
{
    if ( range.size() <= 1 )
        return;

    var left = range;
    var right = range;

    left.popBack((range.size() + 1) / 2);
    right.popFront(range.size() / 2);
    mergeSort(left);
    mergeSort(right);

    var tmp = Array(typeOf(range).RetType)(range.size());

    merge(left, right, tmp.all());
    copy(tmp.all(), range);
}

[rtct] fun sort(range: AnyType, pred: AnyType)
{
    if ( !range.isEmpty() )
        quickSort(range, 0, rangeSize(range) - 1, pred);
}

[rtct] fun quickSort(range: AnyType, m: SizeType, n: SizeType)
{
    if ( m >= n || n == SizeType(DiffType(-1)) )
        return;

    var p = (m + n) / 2;

    swap(range(m), range(p));

    var mv = range(m);
    var i = m + 1;
    var j = n;

    while ( i <= j )
    {
        while ( i <= n && range(i) <= mv )
            i = i + 1;
        while ( j >= m && range(j) > mv )
            j = j - 1;
        if ( i < j )
            swap(range(i), range(j));
    }
    swap(range(m), range(j));
    quickSort(range, m, j - 1);
    quickSort(range, j + 1, n);
}

[rtct] fun quickSort(range: AnyType, m: SizeType, n: SizeType, pred: AnyType)
{
    if ( m >= n || n == SizeType(DiffType(-1)) )
        return;

    var p = (m + n) / 2;

    swap(range(m), range(p));

    var mv = range(m);
    var i = m + 1;
    var j = n;

    while ( i <= j )
    {
        while ( i <= n && !pred(mv, range(i)) )
            i = i + 1;
        while ( j >= m && pred(mv, range(j)) )
            j = j - 1;
        if ( i < j )
            swap(range(i), range(j));
    }
    swap(range(m), range(j));
    quickSort(range, m, j - 1, pred);
    quickSort(range, j + 1, n, pred);
}

[rtct] fun mergeSort(range: AnyType, pred: AnyType)
{
    if ( range.size() <= 1 )
        return;

    var left = range;
    var right = range;

    left.popBack((range.size() + 1) / 2);
    right.popFront(range.size() / 2);
    mergeSort(left, pred);
    mergeSort(right, pred);

    var tmp = Array(typeOf(range).RetType)(range.size());

    merge(left, right, tmp.all(), pred);
    copy(tmp.all(), range);
}

fun binarySearch(range: AnyType, value: AnyType): Bool
{
    while ( !range.isEmpty() )
    {
        var mid = (range.size() - 1) / 2;
        var t = range(mid);

        if ( value == t )
            return true;

        if ( value < t )
            range.popBack(range.size() - mid);
        else
            range.popFront(mid + 1);
    }

    return false;
}

fun binarySearch(range: AnyType, value: AnyType, pred: AnyType): Bool
{
    while ( !range.isEmpty() )
    {
        var mid = (range.size() - 1) / 2;
        var t = range(mid);

        if ( value == t )
            return true;

        if ( pred(value, t) )
            range.popBack(range.size() - mid);
        else
            range.popFront(mid + 1);
    }

    return false;
}
