module std.array;

import contiguousMemoryRange(ContiguousMemoryRange);
import rawPtr(RawPtr);
import ranges(rangeSize, ..);

// !!!
concept RangeTmp(x)
    if typeOf(x.isEmpty()) == Bool
    && isValid(x.front())
    && isValid(x.popFront())
    ;

class[rtct] Array(valueType: Type)
{
    var[static] ValueType = valueType;
    var[static] RangeType = ContiguousMemoryRange(valueType);

    fun ctor(other: @Array)
    {
        var size = other.size();

        _begin = RawPtr(ValueType).alloc(size);
        _end = _begin.advance(DiffType(size));

        var dst = _begin;
        var src = other._begin;

        while ( dst != _end )
        {
            dst.value().ctor(src.value());
            dst = dst.advance();
            src = src.advance();
        }
    }

    fun ctor(size: SizeType)
    {
        _begin = RawPtr(ValueType).alloc(size);
        _end = _begin.advance(DiffType(size));

        var p = _begin;

        while ( p != _end ; p = p.advance() )
            p.value().ctor();
    }

    fun ctor(size: SizeType, value: @ValueType)
    {
        _begin = RawPtr(ValueType).alloc(size);
        _end = _begin.advance(DiffType(size));

        var p = _begin;

        while ( p != _end ; p = p.advance() )
            p.value().ctor(value);
    }

    fun ctor(range: RangeTmp) if typeOf(range) != Array
    {
        if ( !range.isEmpty() )
        {
            var size = rangeSize(range);

            _begin = RawPtr(ValueType).alloc(size);
            _end = _begin.advance(DiffType(size));

            var p = _begin;

            for ( v = range )
            {
                p.value().ctor(v);
                p = p.advance();
            }
        }
    }

    fun[rt] ctorFromCt(src: Array ct)
    {
        var[ct] size = src size;
        this ctor size;
        for[ct] ( i = 0..size )
            at(i) = src(i);
    }

    fun dtor
    {
        if ( isEmpty() )
            return;

        var p = _begin;

        while ( p != _end ; p = p.advance() )
            p.value().dtor();
        _begin.freePtr();
    }

    fun size(): SizeType
    {
        return _end.diff(_begin);
    }

    fun isEmpty(): Bool
    {
        return _begin == _end;
    }

    fun assign(range: RangeType)
    {
        var r = all();

        while ( !r.isEmpty() && !range.isEmpty() )
        {
            r.front().dtor();
            r.front().ctor(range.front());
            r.popFront();
            range.popFront();
        }

        while ( !r.isEmpty() ; r.popFront() )
        {
            r.front().dtor();
            r.front().ctor();
        }
    }

    fun swap(other: @Array)
    {
        var tmp = _begin;

        _begin = other._begin;
        other._begin = tmp;
        tmp = _end;
        _end = other._end;
        other._end = tmp;
    }

    fun at(index: SizeType): @ValueType
    {
        return _begin.advance(DiffType(index)).value();
    }
    fun ()(index: SizeType): @ValueType
    {
        return _begin.advance(DiffType(index)).value();
    }

    fun all(): RangeType
    {
        return RangeType(_begin, _end);
    }

    fun subrange(index: SizeType, num: SizeType): RangeType
    {
        return RangeType(_begin.advance(DiffType(index)), _begin.advance(DiffType(index + num)));
    }

    fun =(other: @Array): @Array
    {
        var tmp = other;

        tmp.swap(this);

        return this;
    }

    fun ==(other: @Array): Bool
    {
        if ( size() != other.size() )
            return false;

        var r1 = all();
        var r2 = other.all();

        while ( !r1.isEmpty() )
        {
            if ( !(r1.front() == r2.front()) )
                return false;

            r1.popFront();
            r2.popFront();
        }

        return true;
    }

    fun !=(other: @Array): Bool
    {
        return !(this == other);
    }

    fun >>(os: @OutStream) if isValid(os << #$ValueType)
    {
        var first = true;
        for ( el = all )
        {
            if ( first )
                first = false;
            else
                os << ", ";
            os << el;
        }
    }
    fun _dumpThis(prefix: StringRef)
    {
        cout << prefix << "dumping " << TypeOp.description(Array) << ": " << mkStreamRefWrapper(this) << endl;
        cout << "    begin: " << mkStreamRefWrapper(_begin.bytePtr()) << endl;
        cout << "    end: " << mkStreamRefWrapper(_end.bytePtr()) << endl;
    }

    var _begin, _end: RawPtr(ValueType);
}
