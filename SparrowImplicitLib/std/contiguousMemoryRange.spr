module std.contiguousMemoryRange;

import rawPtr(RawPtr);
import ranges(..);

class[rtct] ContiguousMemoryRange(valueType: Type)
{
    using PtrType = RawPtr(valueType);
    using RetType = @valueType;

    fun ctor(begin, end: PtrType)
    {
        this._begin ctor begin;
        this._end ctor end;
    }

    fun isEmpty                 = _end.diff(_begin) <= 0;
    fun size: SizeType          = _end.diff(_begin);

    fun front: RetType          = _begin.value();
    fun back: RetType           = _end.advance(-1).value();
    fun () : RetType            = _begin.value();
    fun ()(n: SizeType): RetType = _begin.advance(DiffType(n)).value();

    fun popFront                { _begin = _begin.advance(); }
    fun popBack                 { _end = _end.advance(-1); }
    fun popFront(n: SizeType)   { _begin = _begin.advance(DiffType(n)); }
    fun popBack(n: SizeType)    { _end = _end.advance(-DiffType(n)); }

    fun pre_++ : RetType         { popFront(); return front(); }
    fun post_++ : RetType        { var res: RetType = front(); popFront(); return res; }

    fun frontPtr                = _begin;
    fun backPtr                 = _end;

    fun >>(os: @OutStream) if isValid(os << #$valueType)
    {
        os << "MemRange(";
        for ( i = 0..size ) {
            if ( i > 0 )
                os << ", ";
            os << this(i);
        }
        os << ')';
    }

    var _begin, _end: PtrType;
}
