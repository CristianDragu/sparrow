module std.function;

import newDelete(new, delete);

package Impl
{
    fun returnsVoid {}

    using VoidType = typeOf(returnsVoid());

    class[initCtor] FtorWrapper(ftorType: Type)
    {
        fun clone: @Int = reinterpretCast(@Int, new(ftorType, ftor));
        var ftor: ftorType;
    }

    class FunctionImpl(funPtrType: Type)
    {
        fun ctor
        {
            obj := null;
        }
        fun ctor(ftor: @AnyType)
        {
            using FtorType = -@typeOf(ftor);
            using WrappedFtorType = FtorWrapper(FtorType);
            this.obj := WrappedFtorType(ftor).clone();
            reinterpretCast(@typeOf(\ftor.()), this.callFn) = \ftor.();
            reinterpretCast(@typeOf(\WrappedFtorType.clone), this.cloneFn) = \WrappedFtorType.clone;
            reinterpretCast(@typeOf(\ftor.dtor), this.destructFn) = \ftor.dtor;
        }
        fun ctor(other: @FunctionImpl)
        {
            if ( other.obj !== null )
                this.obj := other.cloneFn(other.obj);
            this.callFn ctor other.callFn;
            this.cloneFn ctor other.cloneFn;
            this.destructFn ctor other.destructFn;
        }
        fun dtor
        {
            if ( obj !== null )
            {
                destructFn(obj);    // Call the right destructor
                delete(obj);        // Free the memory for the object
            }
        }
        fun =(other: @FunctionImpl)
        {
            if ( obj !== null )
            {
                destructFn(obj);    // Call the right destructor
                delete(obj);        // Free the memory for the object
            }
            if ( other.obj !== null )
                this.obj := other.cloneFn(other.obj);
            else
                this.obj := null;
            this.callFn = other.callFn;
            this.cloneFn = other.cloneFn;
            this.destructFn = other.destructFn;
        }

        fun >>(os: @OutStream)
        {
            os << "Fun(obj=" << mkStreamRefWrapper(obj)
               << ", funPtr=" << mkStreamRefWrapper(callFn.funPtr)
               << ")" << flush;
        }

        var obj: @Int;
        var callFn: funPtrType;
        var cloneFn: FunctionPtr(@Int, @Int);
        var destructFn: FunctionPtr(VoidType, @Int);
    }
}



class Function(resT: Type)
{
    using arity = 0;
    fun ctor(ftor: @AnyType) if isValid(ftor()) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (): resT = impl.callFn(impl.obj);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int));
}

class Function(resT, T1: Type)
{
    using arity = 1;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1): resT = impl.callFn(impl.obj, p1);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1));
}

class Function(resT, T1, T2: Type)
{
    using arity = 2;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2): resT = impl.callFn(impl.obj, p1, p2);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2));
}

class Function(resT, T1, T2, T3: Type)
{
    using arity = 3;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3): resT = impl.callFn(impl.obj, p1, p2, p3);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3));
}

class Function(resT, T1, T2, T3, T4: Type)
{
    using arity = 4;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4): resT = impl.callFn(impl.obj, p1, p2, p3, p4);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4));
}

class Function(resT, T1, T2, T3, T4, T5: Type)
{
    using arity = 5;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5));
}

class Function(resT, T1, T2, T3, T4, T5, T6: Type)
{
    using arity = 6;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7: Type)
{
    using arity = 7;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8: Type)
{
    using arity = 8;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8, T9: Type)
{
    using arity = 9;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8, p9);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8, T9));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10: Type)
{
    using arity = 10;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11: Type)
{
    using arity = 11;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10, p11: T11): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12: Type)
{
    using arity = 12;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$T12)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10, p11: T11, p12: T12): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13: Type)
{
    using arity = 13;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$T12, #$T13)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10, p11: T11, p12: T12, p13: T13): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14: Type)
{
    using arity = 14;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$T12, #$T13, #$T14)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10, p11: T11, p12: T12, p13: T13, p14: T14): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14));
}

class Function(resT, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15: Type)
{
    using arity = 15;
    fun ctor(ftor: @AnyType) if isValid(ftor(#$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$T12, #$T13, #$T14, #$T15)) { impl ctor ftor; }
    fun isNull = impl.obj === null;
    fun isSet = impl.obj !== null;

    fun () (p1: T1, p2: T2, p3: T3, p4: T4, p5: T5, p6: T6, p7: T7, p8: T8, p9: T9, p10: T10, p11: T11, p12: T12, p13: T13, p14: T15, p14: T15): resT = impl.callFn(impl.obj, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p14);

    fun >>(os: @OutStream) { os << impl; }
    private var impl: Impl.FunctionImpl(FunctionPtr(resT, @Int, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15));
}
