module std.list;

import rawPtr(RawPtr);
import array(Array);

class List(valueType: Type)
{
    using ValueType = valueType;
    using RangeType = ListRange;
    using RetType = @valueType;

    fun ctor()
    {
        _listSize = 0;
        _head.prev = _headNode();
        _head.next = _headNode();
    }

    fun ctor(other: @List)
    {
        _listSize = 0;
        _head.prev = _headNode();
        _head.next = _headNode();
        for v = other.all()
            pushBack(v);
    }

    fun ctor(range: Range)
    {
        _listSize = 0;
        _head.prev = _headNode();
        _head.next = _headNode();
        for v = range
            pushBack(v);
    }

    fun dtor
    {
        var p = _head.next;
        var hn = _headNode();

        while p != hn
            var nextNode = p.value().next;

            p.value().data.dtor();
            p.freePtr();
            p = nextNode;
    }

    fun size: SizeType          = _listSize;
    fun isEmpty                 = _listSize == 0;

    fun front: RetType          = _head.next.value().data;
    fun back: RetType           = _head.prev.value().data;

    fun all: RangeType          = RangeType(_head.next, _headNode());

    fun assign(range: Range)
    {
        clear();
        for v = range
            pushBack(v);
    }

    fun swap(other: @List)
    {
        _head.prev.swap(other._head.prev);
        _head.next.swap(other._head.next);

        var tmpSize = _listSize;
        _listSize = other._listSize;
        other._listSize = tmpSize;

        if ( _listSize == 0 )
        {
            _head.prev = _headNode();
            _head.next = _headNode();
        }
        else
        {
            _head.prev.value().next = _headNode();
            _head.next.value().prev = _headNode();
        }
        if ( other._listSize == 0 )
        {
            other._head.prev = other._headNode();
            other._head.next = other._headNode();
        }
        else
        {
            other._head.prev.value().next = other._headNode();
            other._head.next.value().prev = other._headNode();
        }
    }

    fun insertBefore(value: @ValueType, pos: RangeType)
    {
        var tmp = _NodeTypePtr.alloc(1);

        tmp.value().data.ctor(value);
        tmp.value().next = pos._begin;
        tmp.value().prev = pos._begin.value().prev;
        pos._begin.value().prev.value().next = tmp;
        pos._begin.value().prev = tmp;
        ++_listSize;
    }

    fun insertBefore(range: Range, pos: RangeType)
    {
        for v = range
            insertBefore(v, pos);
    }

    fun insertAfter(value: @ValueType, pos: RangeType)
    {
        var tmp = _NodeTypePtr.alloc(1);

        tmp.value().data.ctor(value);
        tmp.value().next = pos._end;
        tmp.value().prev = pos._end.value().prev;
        pos._end.value().prev.value().next = tmp;
        pos._end.value().prev = tmp;
        ++_listSize;
    }

    fun insertAfter(range: Range, pos: RangeType)
    {
        for v = range
            insertAfter(v, pos);
    }

    fun pushFront(value: @ValueType)
    {
        var tmp = _NodeTypePtr.alloc(1);

        tmp.value().data.ctor(value);
        tmp.value().next = _head.next;
        tmp.value().prev = _headNode();
        _head.next.value().prev = tmp;
        _head.next = tmp;
        ++_listSize;
    }

    fun popFront
    {
        var right = _head.next.value().next;

        _head.next.value().data.dtor();
        _head.next.freePtr();
        _head.next = right;
        right.value().prev = _headNode();
        _listSize = _listSize - 1;
    }

    fun pushBack(value: @ValueType)
    {
        var tmp = _NodeTypePtr.alloc(1);

        tmp.value().prev = _head.prev;
        tmp.value().next = _headNode();
        tmp.value().data.ctor(value);
        _head.prev.value().next = tmp;
        _head.prev = tmp;
        ++_listSize;
    }
    fun +=(value: @ValueType) { pushBack(value); }

    fun popBack
    {
        var left = _head.prev.value().prev;

        _head.prev.value().data.dtor();
        _head.prev.freePtr();
        _head.prev = left;
        left.value().next = _headNode();
        _listSize = _listSize - 1;
    }

    fun remove(value: @ValueType)
    {
        var p = _head.next;
        var hn = _headNode();

        while p != hn
        {
            var tmp = p.value().next;

            if ( p.value().data == value )
            {
                p.value().prev.value().next = p.value().next;
                p.value().next.value().prev = p.value().prev;
                p.value().data.dtor();
                p.freePtr();
                _listSize = _listSize - 1;
            }
            p = tmp;
        }
    }

    fun removeIf(pred: AnyType)
    {
        var p = _head.next;
        var hn = _headNode();

        while p != hn
        {
            var tmp = p.value().next;

            if ( pred(p.value().data) )
            {
                p.value().prev.value().next = p.value().next;
                p.value().next.value().prev = p.value().prev;
                p.value().data.dtor();
                p.freePtr();
                _listSize = _listSize - 1;
            }
            p = tmp;
        }
    }

    fun remove(range: RangeType)
    {
        var left = range._begin.value().prev;

        while !range.isEmpty()
        {
            var tmp = range._begin.value().next;

            range._begin.value().data.dtor();
            range._begin.freePtr();
            _listSize = _listSize - 1;
            range._begin = tmp;
        }
        left.value().next = range._end;
        range._end.value().prev = left;
    }

    fun resize(n: SizeType)
    {
        if ( n == _listSize )
            return;

        if ( n < _listSize )
        {
            var p = _head.prev;
            var t = _listSize - n;

            _listSize = _listSize - t;
            while t > 0 ; t -= 1
            {
                var tmp = p.value().prev;

                p.value().data.dtor();
                p.freePtr();
                p = tmp;
            }
            p.value().next = _headNode();
            _head.prev = p;
        }
        else
        {
            // TODO: Find a proper way of doing this
            [ct] if ( isValid(pushBack(ValueType())) )
            {
                pushBack(ValueType());
                while n > _listSize
                    pushBack(ValueType());
            }
        }
    }

    fun clear
    {
        if ( _listSize == 0 )
            return;

        var p = _head.next;
        var hn = _headNode();

        while p != hn
        {
            var tmp = p.value().next;

            p.value().data.dtor();
            p.freePtr();
            p = tmp;
        }
        _head.next = hn;
        _head.prev = hn;
        _listSize = 0;
    }

    fun unique
    {
        if ( _listSize <= 1 )
            return;

        var p = _head.next;
        var hn = _headNode();

        while p != hn
        {
            var q = p.value().next;

            while q != hn && p.value().data == q.value().data
            {
                var tmp = q.value().next;

                q.value().data.dtor();
                q.freePtr();
                q = tmp;
                _listSize = _listSize - 1;
            }
            if ( p.value().next != q )
            {
                p.value().next = q;
                q.value().prev = p;
            }
            p = q;
        }
    }

    fun unique(pred: AnyType)
    {
        if ( _listSize <= 1 )
            return;

        var p = _head.next;
        var hn = _headNode();

        while p != hn
        {
            var q = p.value().next;

            while q != hn && pred(p.value().data, q.value().data)
            {
                var tmp = q.value().next;

                q.value().data.dtor();
                q.freePtr();
                q = tmp;
                _listSize = _listSize - 1;
            }
            if ( p.value().next != q )
            {
                p.value().next = q;
                q.value().prev = p;
            }
            p = q;
        }
    }

    fun spliceBefore(pos: RangeType, other: @List)
    {
        if ( !other.isEmpty() )
        {
            _transfer(pos._begin, other._head.next, other._headNode());
            _listSize = _listSize + other._listSize;
            other._listSize = 0;
        }
    }

    fun spliceBefore(pos: RangeType, other: @List, range: RangeType)
    {
        if ( !range.isEmpty() )
        {
            var tmp = range;

            if ( _headNode() != other._headNode() )
            {
                var t = 0;

                while !tmp.isEmpty()
                {
                    tmp.popFront();
                    ++t;
                }
                _listSize += t;
                other._listSize -= t;
            }
            _transfer(pos._begin, range._begin, range._end);
        }
    }

    fun spliceAfter(pos: RangeType, other: @List)
    {
        if ( !other.isEmpty() )
        {
            _transfer(pos._end, other._head.next, other._headNode());
            _listSize = _listSize + other._listSize;
            other._listSize = 0;
        }
    }

    fun spliceAfter(pos: RangeType, other: @List, range: RangeType)
    {
        if ( !range.isEmpty() )
        {
            var tmp = range;

            if ( _headNode() != other._headNode() )
            {
                var t = 0;

                while !tmp.isEmpty()
                {
                    tmp.popFront();
                    t = t + 1;
                }
                _listSize = _listSize + t;
                other._listSize = other._listSize - t;
            }
            _transfer(pos._end, range._begin, range._end);
        }
    }

    // fun sort()
    // {
        // if ( _listSize < 2 )
            // return;

        // var carry: List;
        // var counter = Array(List)(64);
        // var fill = 0;

        // while !isEmpty()
        // {
            // var r = all();

            // r._end = r._begin.value().next;
            // carry.spliceBefore(carry.all(), this, r);

            // var i = 0;

            // while i < fill && !counter(i).isEmpty() ; ++i
            // {
                // counter(i).merge(carry);
                // carry.swap(counter(i));
            // }
            // carry.swap(counter(i));
            // if ( i == fill )
                // ++fill;
        // }

        // var i = 1;

        // while i < fill ; ++i
            // counter(i).merge(counter(i - 1));
        // swap(counter(fill - 1));
    // }

    fun sort(pred: AnyType)
    {
        if ( _listSize < 2 )
            return;

        var carry: List;
        var counter = Array(List)(64);
        var fill = 0;

        while !isEmpty()
        {
            var r = all();

            r._end = r._begin.value().next;
            carry.spliceBefore(carry.all(), this, r);

            var i = 0;

            while i < fill && !counter(i).isEmpty() ; ++i
            {
                counter(i).merge(carry, pred);
                carry.swap(counter(i));
            }
            carry.swap(counter(i));
            if ( i == fill )
                ++fill;
        }

        var i = 1;

        while i < fill ; ++i
            counter(i).merge(counter(i - 1), pred);
        swap(counter(fill - 1));
    }

    // fun merge(other: @List)
    // {
        // var r1 = all();
        // var r2 = other.all();

        // while !r1.isEmpty() && !r2.isEmpty()
        // {
            // if ( r2.front() < r1.front() )
            // {
                // var tmp = r2._begin.value().next;

                // _transfer(r1._begin, r2._begin, tmp);
                // r2._begin = tmp;
            // }
            // else
                // r1.popFront();
        // }
        // if ( !r2.isEmpty() )
            // _transfer(r1._end, r2._begin, r2._end);
        // _listSize = _listSize + other._listSize;
        // other._listSize = 0;
    // }

    fun merge(other: @List, pred: AnyType)
    {
        var r1 = all();
        var r2 = other.all();

        while !r1.isEmpty() && !r2.isEmpty()
        {
            if ( pred(r2.front(), r1.front()) )
            {
                var tmp = r2._begin.value().next;

                _transfer(r1._begin, r2._begin, tmp);
                r2._begin = tmp;
            }
            else
                r1.popFront();
        }
        if ( !r2.isEmpty() )
            _transfer(r1._end, r2._begin, r2._end);
        _listSize = _listSize + other._listSize;
        other._listSize = 0;
    }

    fun reverse()
    {
        if ( _listSize < 2 )
            return;

        var p = _head.next;
        var hn = _headNode();

        while p != hn
        {
            var tmp = p.value().prev;

            p.value().prev = p.value().next;
            p.value().next = tmp;
            p = p.value().prev;
        }

        var tmp = _head.prev;

        _head.prev = _head.next;
        _head.next = tmp;
    }

    fun =(other: @List)
    {
        var tmp = other;
        swap(tmp);
    }

    fun ==(other: @List): Bool
    {
        if ( _listSize != other._listSize )
            return false;

        var r1 = all();
        var r2 = other.all();

        while !r1.isEmpty()
        {
            if ( !(r1.front() == r2.front()) )
                return false;

            r1.popFront();
            r2.popFront();
        }

        return true;
    }

    using _NodeTypePtr = RawPtr(_NodeType);

    var _head: _NodeLinks;
    var _listSize: SizeType;

    fun _headNode = _NodeTypePtr.fromRef(reinterpretCast(@_NodeType, _head));

    [static] fun _transfer(pos, begin, end: _NodeTypePtr)
    {
        end.value().prev.value().next = pos;
        begin.value().prev.value().next = end;
        pos.value().prev.value().next = begin;

        var tmp = pos.value().prev;

        pos.value().prev = end.value().prev;
        end.value().prev = begin.value().prev;
        begin.value().prev = tmp;
    }

    class _NodeLinks
    {
        var prev, next: RawPtr(_NodeType);
    }

    class _NodeType
    {
        var prev, next: RawPtr(_NodeType);
        var data: ValueType;
    }

    [initCtor] class ListRange
    {
        using RetType = @ValueType;

        fun isEmpty         = _begin == _end;

        fun front: RetType  = _begin.value().data;
        fun back: RetType   = _end.value().prev.value().data;

        fun popFront        { _begin = _begin.value().next; }
        fun popBack         { _end = _end.value().prev; }

        var _begin, _end: _NodeTypePtr;

        fun >>(os: @OutStream) if isValid(os << #$ValueType)
            var first = true;
            var p = _begin;
            while p != _end ; p = p.value().next
                if first
                    first = false;
                else
                    os << ", ";
                os << p.value().data;
    }
}
