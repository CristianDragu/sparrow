module std.map;

import hashTable(HashTable);
import typeTraits(DefaultTypeTraits);
import tuple(Tuple, PairFirst, PairSecond);
import ranges(transform);

class Map(keyType, dataType: Type, traitsType: Type = DefaultTypeTraits)
{
    using KeyType = keyType;
    using DataType = dataType;
    using TraitsType = traitsType;
    using ValueType = Tuple(KeyType, DataType);
    using _ImplTable = HashTable(keyType, ValueType, PairFirst(ValueType), TraitsType);
    using RangeType = _ImplTable.RangeType;

    var _hashTable: _ImplTable;

    fun ctor(n: SizeType)                                       { _hashTable.ctor(n, TraitsType()); }
    fun ctor(n: SizeType, traits: traitsType)                   { _hashTable.ctor(n, traits); }
    fun ctor(range: Range)                                      { _hashTable.ctor(range, 0, TraitsType()); }
    fun ctor(range: Range, n: SizeType)                         { _hashTable.ctor(range, n, HashType(), CompareType()); }
    fun ctor(range: Range, n: SizeType, traits: traitsType)     { _hashTable.ctor(range, n, traits); }
    fun ctor(other: @Map)                                       { this._hashTable ctor other._hashTable; }

    fun traits                                  = _hashTable.traits;

    fun size                                    = _hashTable.size;
    fun isEmpty                                 = (_hashTable.size == 0);
    fun bucketCount                             = _hashTable.bucketCount;
    fun reserve(n: SizeType)                    { _hashTable.reserve(n); }

    fun all                                     = _hashTable.all();
    fun keys                                    = transform(all(), PairFirst(ValueType)());
    fun values                                  = transform(all(), PairSecond(ValueType)());

    fun insert(key: @KeyType, data: @DataType)  = _hashTable.insert(ValueType(key, data));
    fun insert(value: @ValueType)               = _hashTable.insert(value);
    fun insert(range: Range)                    { _hashTable.insert(range); }
    fun remove(key: @KeyType)                   { _hashTable.remove(key); }
    fun remove(range: RangeType)                { _hashTable.remove(range); }

    fun contains(key: @KeyType)                 = _hashTable.contains(key);
    fun count(key: @KeyType)                    = _hashTable.count(key);
    fun equalRange(key: @KeyType)               = _hashTable.equalRange(key);
    fun find(key: @KeyType)                     = _hashTable.find(key);

    fun ()(key: @KeyType): @DataType            = at(key);
    fun at(key: @KeyType): @DataType
    {
        var r = find(key);
        if ( r.isEmpty() )
        {
            var data: DataType;
            r = _hashTable.insert(ValueType(key, data));
        }
        return r.front().v2;
    }

    fun clear()                                 { _hashTable.clear(); }

    fun swap(other: @Map)                       { this._hashTable swap other._hashTable; }

    fun >> (os: @OutStream)                     { _hashTable.>>(os); }
}
