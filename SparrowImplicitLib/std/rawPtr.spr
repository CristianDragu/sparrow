module std.rawPtr;

class[rtct] RawPtr(valueType: Type)
{
    using ValueType = valueType;

    fun[static] fromRef(ptr: @ValueType): RawPtr
    {
        var res: RawPtr;
        res._ptr := ptr;
        return res;
    }

    fun[static] fromBytePtr(ptr: @Byte): RawPtr
    {
        var res: RawPtr;
        res._ptr := reinterpretCast(@ValueType, ptr);
        return res;
    }

    fun[static] alloc(num: SizeType): RawPtr
    {
        var res: RawPtr;
        res._ptr := reinterpretCast(@ValueType, malloc(num * sizeOf(ValueType)));
        return res;
    }

    fun value: @ValueType               = _ptr;
    fun advance: RawPtr                 = RawPtr.fromBytePtr(ptrAdd(bytePtr(), sizeOf(ValueType)));
    fun advance(n: SizeType): RawPtr    = RawPtr.fromBytePtr(ptrAdd(bytePtr(), n * sizeOf(ValueType)));
    fun advance(n: DiffType): RawPtr    = RawPtr.fromBytePtr(ptrAdd(bytePtr(), n * DiffType(sizeOf(ValueType))));
    fun diff(other: RawPtr): DiffType   = DiffType(ptrDiff(bytePtr(), other.bytePtr()) / DiffType(sizeOf(ValueType)));

    fun isNull: Bool            = _ptr === null;
    fun isSet                   = _ptr !== null;

    fun bytePtr: @Byte          = reinterpretCast(@Byte, _ptr);

    fun reallocPtr(n: SizeType)
    {
        _ptr := reinterpretCast(@ValueType, realloc(bytePtr(), n * sizeOf(ValueType)));
    }

    fun freePtr
    {
        if ( isSet() )
            free(bytePtr());
    }

    fun swap(other: @RawPtr)
    {
        var t: @ValueType = _ptr;
        _ptr := other._ptr;
        other._ptr := t;
    }

    fun =(other: RawPtr)        { _ptr := other._ptr; }

    fun ==(other: RawPtr)       = _ptr === other._ptr;
    fun < (other: RawPtr)       = ptrDiff(this.bytePtr(), other.bytePtr()) < DiffType(0);

    fun >>(os: @OutStream)
    {
        os << "RawPtr(" << mkStreamRefWrapper(bytePtr()) << ")";
    }

    var _ptr: @ValueType;
}
