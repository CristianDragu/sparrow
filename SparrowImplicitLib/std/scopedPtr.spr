module std.scopedPtr

import newDelete(delete)

[noDefault]
class ScopedPtr(type: Type)
    using ValueType = type

    var _ref: @ValueType

    fun ctor(this: @ScopedPtr)
        _ref := null

    fun ctor(this: @ScopedPtr, _ref: @ValueType)
        this._ref := _ref

    fun dtor(this: @ScopedPtr)
        delete(_ref)

[protected]
    fun ==(this, other: ScopedPtr)    = _ref === other._ref


    fun get(this: ScopedPtr): @ValueType         = _ref
    fun isNull(this: ScopedPtr)                  = _ref === null
    fun isSet(this: ScopedPtr)                   = _ref !== null


    fun reset(this: @ScopedPtr)                         { delete(_ref); _ref := null }
    fun reset(this: @ScopedPtr, ref: @this.ValueType)   { delete(this._ref); this._ref := ref }

    fun swap(this: @ScopedPtr, other: typeOf(this))
        var tmp: @ValueType = other._ref

        other._ref := _ref
        _ref := tmp
