module std.sortedPtr;

import sortedTable(SortedTable);
import tuple(Tuple, PairFirst, PairSecond);
import ranges(transform);

class SortedMap(keyType, dataType, lessType, compareType: Type)
{
    using KeyType = keyType;
    using DataType = dataType;
    using LessType = lessType;
    using CompareType = compareType;
    using ValueType = Tuple(KeyType, DataType);
    using _ImplTable = SortedTable(keyType, ValueType, PairFirst(ValueType), lessType, compareType);
    using RangeType = _ImplTable.RangeType;

    var _sortedTable: _ImplTable;

    fun ctor(n: SizeType)                                       { _sortedTable.ctor(n, LessType(), CompareType()); }
    fun ctor(n: SizeType, less: LessType)                       { _sortedTable.ctor(n, less, CompareType()); }
    fun ctor(n: SizeType, less: LessType, comp: CompareType)    { _sortedTable.ctor(n, less, comp); }
    fun ctor(range: Range)                                      { _sortedTable.ctor(range, 0, LessType(), CompareType()); }
    fun ctor(range: Range, n: SizeType)                         { _sortedTable.ctor(range, n, LessType(), CompareType()); }
    fun ctor(range: Range, n: SizeType, less: LessType)         { _sortedTable.ctor(range, n, less, CompareType()); }
    fun ctor(range: Range, n: SizeType, less: LessType, comp: CompareType)  { _sortedTable.ctor(range, n, less, comp); }
    fun ctor(other: @SortedMap)                                 { this._sortedTable ctor other._sortedTable; }

    fun lessFunction                            = _sortedTable.lessFunction;
    fun comparator                              = _sortedTable.comparator;

    fun size                                    = _sortedTable.size();
    fun isEmpty                                 = _sortedTable.isEmpty();
    fun capacity                                = _sortedTable.capacity;
    fun reserve(n: SizeType)                    { _sortedTable.reserve(n); }

    fun all                                     = _sortedTable.all();
    fun keys                                    = transform(all(), PairFirst(ValueType)());
    fun values                                  = transform(all(), PairSecond(ValueType)());

    fun insert(key: @KeyType, data: @DataType)  = _sortedTable.insert(ValueType(key, data));
    fun insert(value: @ValueType)               = _sortedTable.insert(value);
    fun insert(range: Range)                    { _sortedTable.insert(range); }
    fun remove(key: @KeyType)                   { _sortedTable.remove(key); }
    fun remove(range: RangeType)                { _sortedTable.remove(range); }

    fun contains(key: @KeyType)                 = _sortedTable.contains(key);
    fun count(key: @KeyType)                    = _sortedTable.count(key);
    fun equalRange(key: @KeyType)               = _sortedTable.equalRange(key);
    fun find(key: @KeyType)                     = _sortedTable.find(key);

    fun ()(key: @KeyType): @DataType            = at(key);
    fun at(key: @KeyType): @DataType
    {
        var r = _sortedTable.lowerBound(key);
        if ( r.isEmpty() || !_sortedTable.comparator()(key, r.front().v1) )
        {
            var data: DataType;
            r = _sortedTable.insert(ValueType(key, data));
        }
        return r.front().v2;
    }

    fun clear()                                 { _sortedTable.clear(); }

    fun swap(other: @SortedMap)                 { this._sortedTable swap other._sortedTable; }
}
