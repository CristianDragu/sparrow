module std.sortedTable;

import vector(Vector);
import ranges(rangeSize);

class SortedTable(keyType, valueType, valueToKeyType, lessType, compareType: Type)
{
    using KeyType = keyType;
    using ValueType = valueType;
    using ValueToKeyType = valueToKeyType;
    using LessType = lessType;
    using CompareType = compareType;
    using RangeType = Vector(valueType).RangeType;

    fun ctor()
    {
        this.ctor(0, LessType(), CompareType());
    }

    fun ctor(n: SizeType, less: LessType, comp: CompareType)
    {
        _table.ctor();
        this._valToKey ctor;
        this._less ctor less;
        this._comp ctor comp;
        if ( n > 0)
            reserve(n);
    }

    fun ctor(range: AnyType, n: SizeType, less: LessType, comp: CompareType)
    {
        _table.ctor();
        if ( n > 0 )
            _table.reserve(n);
        else
            _table.reserve(rangeSize(range));
        this._valToKey ctor;
        this._less ctor less;
        this._comp ctor comp;

        //_table.assign(range);
        //sort(_table.all(), less);
        for ( v = range )
            insert(v);
    }

    fun ctor(other: @SortedTable)
    {
        _table ctor other._table;
        _less ctor other._less;
        _comp ctor other._comp;
    }

    fun swap(other: @SortedTable)
    {
        _table.swap(other._table);

        var tmpv = _valToKey;
        _valToKey = other._valToKey;
        other._valToKey = tmpv;

        var tmpl = _less;
        _less = other._less;
        other._less = tmpl;

        var tmpc = _comp;
        _comp = other._comp;
        other._comp = tmpc;
    }

    fun lessFunction    = _less;
    fun comparator      = _comp;

    fun isEmpty         = _table.isEmpty();
    fun size            = _table.size();
    fun capacity        = _table.capacity();

    fun all             = _table.all();

    fun reserve(n: SizeType)    { _table.reserve(n); }

    fun insert(value: @ValueType): RangeType
    {
        var r = lowerBound(_valToKey(value));
        var idx = _table.size() - r.size();
        if ( r.isEmpty() || !_comp(_valToKey(value), _valToKey(r.front())) )
            _table.insertBefore(value, r);
        var res = _table.all();
        res.popFront(idx);
        return res;
    }

    fun insert(range: Range)
    {
        _table.reserve(_table.size() + rangeSize(range));
        for ( v = range )
        {
            var r = lowerBound(_valToKey(v));
            if ( r.isEmpty() || !_comp(_valToKey(v), _valToKey(r.front())) )
                _table.insertBefore(v, r);
        }
    }

    fun remove(key: @KeyType)
    {
        if ( isEmpty() )
            return;

        var r = find(key);
        if ( !r.isEmpty() )
        {
            var idx = r.frontPtr().diff(_table.all().frontPtr());
            _table.remove(idx);
        }
    }

    fun remove(range: RangeType)
    {
        if ( !range.isEmpty() )
            _table.remove(range);
    }

    fun contains(key: @KeyType): Bool  = !find(key).isEmpty();
    fun count(key: @KeyType): SizeType = ife(find(key).isEmpty(), 0, 1);

    fun lowerBound(key: @KeyType): RangeType
    {
        var first: SizeType = 0;
        var len = _table.size();
        while ( len > 0 )
        {
            var l2 = len / 2;
            var el: @ValueType = _table(first + l2);
            if ( _less(_valToKey(el), key) )
            {
                first += l2+1;
                len -= l2+1;
            }
            else
                len = l2;
        }
        var r = _table.all();
        r.popFront(first);
        return r;
    }

    fun upperBound(key: @KeyType): RangeType
    {
        var first: SizeType = 0;
        var len = _table.size();
        while ( len > 0 )
        {
            var l2 = len / 2;
            var el: @ValueType = _table(first + l2);
            if ( _less(key, _valToKey(el)) )
                len = l2;
            else
            {
                first += l2+1;
                len -= l2+1;
            }
        }
        var r = _table.all();
        r.popFront(first);
        return r;
    }

    fun equalRange(key: @KeyType): RangeType
    {
        var r = find(key);
        if ( !r.isEmpty() )
            return RangeType(r.frontPtr(), r.frontPtr().advance(1));
        else
            return RangeType();
    }

    fun find(key: @KeyType): RangeType
    {
        var r = lowerBound(key);
        if ( !r.isEmpty() && _comp(key, _valToKey(r.front())) )
            return r;
        else
            return RangeType();
    }

    fun clear()
    {
        _table.clear();
    }

    fun =(other: @SortedTable): @SortedTable
    {
        _table = other._table;
        _valToKey = other._valToKey;
        _comp = other._comp;
        _less = other._less;
        _valToKey = other._valToKey;

        return this;
    }

    fun ==(other: @SortedTable): Bool
    {
        return _valToKey == other._valToKey && _less == other._less && _comp == other._comp && _table == other._table;
    }

    fun !=(other: @SortedTable): Bool = !(this == other);

    var _table: Vector(ValueType);
    var _valToKey: ValueToKeyType;
    var _less: LessType;
    var _comp: CompareType;
}

class[rtct] Less(type: Type) if isValid(#$type < #$type)
{
    fun ()(l, r: @type) = l < r;
}

