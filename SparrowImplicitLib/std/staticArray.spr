module std.staticArray

import contiguousMemoryRange(ContiguousMemoryRange)
import rawPtr(RawPtr)
import ranges

[rtct]
    class StaticArray(valueType: Type, arraySize: SizeType)
        using ValueType = valueType
        using RangeType = ContiguousMemoryRange(valueType)
        using _arraySize = arraySize

        var _buf: static_buffer(arraySize * sizeOf(ValueType))

        fun ctor
            for v: @ValueType = this.all
                v ctor

        fun ctor(other: @StaticArray)
            for i = 0..arraySize
                this(i) ctor other(i)

        fun ctor(value: @ValueType)
            for v: @ValueType = this.all
                v.ctor(value)

        fun ctor(range: Range)
            for v: @ValueType = this.all
                if !range.isEmpty
                    v.ctor(range.front)
                    range.popFront
                else
                    v ctor
        [ct] if arraySize == 2
        fun ctor(v0,v1: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
        [ct] if arraySize == 3
        fun ctor(v0,v1,v2: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
        [ct] if arraySize == 4
        fun ctor(v0,v1,v2,v3: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
            this(3) ctor v3
        [ct] if arraySize == 5
        fun ctor(v0,v1,v2,v3,v4: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
            this(3) ctor v3
            this(4) ctor v4
        [ct] if arraySize == 6
        fun ctor(v0,v1,v2,v3,v4,v5: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
            this(3) ctor v3
            this(4) ctor v4
            this(5) ctor v5
        [ct] if arraySize == 7
        fun ctor(v0,v1,v2,v3,v4,v5,v6: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
            this(3) ctor v3
            this(4) ctor v4
            this(5) ctor v5
            this(6) ctor v6
        [ct] if arraySize == 8
        fun ctor(v0,v1,v2,v3,v4,v5,v6,v7: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
            this(3) ctor v3
            this(4) ctor v4
            this(5) ctor v5
            this(6) ctor v6
            this(7) ctor v7
        [ct] if arraySize == 9
        fun ctor(v0,v1,v2,v3,v4,v5,v6,v7,v8: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
            this(3) ctor v3
            this(4) ctor v4
            this(5) ctor v5
            this(6) ctor v6
            this(7) ctor v7
            this(8) ctor v8
        [ct] if arraySize == 10
        fun ctor(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9: @ValueType)
            this(0) ctor v0
            this(1) ctor v1
            this(2) ctor v2
            this(3) ctor v3
            this(4) ctor v4
            this(5) ctor v5
            this(6) ctor v6
            this(7) ctor v7
            this(8) ctor v8
            this(9) ctor v9

        fun dtor
            for v: @ValueType = this.all
                v dtor


[rtct, protected]
    fun =(this, other: @StaticArray): @typeOf(this)
        for i = 0.._arraySize
            this(i) = other(i)
        return this

    fun ==(this, other: @StaticArray): Bool
        for i = 0.._arraySize
            if this(i) != other(i)
                return false
        return true

    fun size(this: @StaticArray): SizeType
        return _arraySize

    fun isEmpty(this: @StaticArray): Bool
        return _arraySize == 0

    fun assign(this: @StaticArray, range: this.RangeType)
        for v: @ValueType = this.all
            if !range.isEmpty
                v = range.front
                range.popFront
            else
                return

    fun swap(this: @StaticArray, other: typeOf(StaticArray))
        for i = 0.._arraySize
            var tmp = this(i)
            this(i) = other(i)
            other(i) = tmp

    fun at(this: @StaticArray, index: SizeType): @ValueType = this._asPtr().advance(DiffType(index)).value
    fun ()(this: @StaticArray, index: SizeType): @ValueType = this._asPtr().advance(DiffType(index)).value

    fun all(this: @StaticArray) = RangeType(this._asPtr, this._asPtr().advance(DiffType(_arraySize)))

    fun subrange(this: @StaticArray, index: SizeType, num: SizeType) \
        = RangeType(this._asPtr().advance(DiffType(index)), this._asPtr().advance(DiffType(index + num)))

    fun _asPtr(this: @StaticArray) = RawPtr(ValueType)(reinterpretCast(@Byte, _buf))

fun mkValues(v0,v1: AnyType) = StaticArray(typeOf(v0), 2)(v0,v1)
fun mkValues(v0,v1,v2: AnyType) = StaticArray(typeOf(v0), 3)(v0,v1,v2)
fun mkValues(v0,v1,v2,v3: AnyType) = StaticArray(typeOf(v0), 4)(v0,v1,v2,v3)
fun mkValues(v0,v1,v2,v3,v4: AnyType) = StaticArray(typeOf(v0), 5)(v0,v1,v2,v3,v4)
fun mkValues(v0,v1,v2,v3,v4,v5: AnyType) = StaticArray(typeOf(v0), 6)(v0,v1,v2,v3,v4,v5)
fun mkValues(v0,v1,v2,v3,v4,v5,v6: AnyType) = StaticArray(typeOf(v0), 7)(v0,v1,v2,v3,v4,v5,v6)
fun mkValues(v0,v1,v2,v3,v4,v5,v6,v7: AnyType) = StaticArray(typeOf(v0), 8)(v0,v1,v2,v3,v4,v5,v6,v7)
fun mkValues(v0,v1,v2,v3,v4,v5,v6,v7,v8: AnyType) = StaticArray(typeOf(v0), 9)(v0,v1,v2,v3,v4,v5,v6,v7,v8)
fun mkValues(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9: AnyType) = StaticArray(typeOf(v0), 10)(v0,v1,v2,v3,v4,v5,v6,v7,v8,v9)


[ctGeneric]
fun StaticArray2d(baseType: Type, d1, d2: SizeType ct) \
    = StaticArray(StaticArray(baseType, d2), d1)

[ctGeneric]
fun StaticArray3d(baseType: Type, d1, d2, d3: SizeType ct) \
    = StaticArray(StaticArray(StaticArray(baseType, d3), d2), d1)

[ctGeneric]
fun StaticArray4d(baseType: Type, d1, d2, d3, d4: SizeType ct) \
    = StaticArray(StaticArray(StaticArray(StaticArray(baseType, d4), d3), d2), d1)

