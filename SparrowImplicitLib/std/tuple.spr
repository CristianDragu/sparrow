module std.tuple

concept TupleType(x) if (
       typeOf(x.arity) == Int
    && isValid(x.v1)
    && isValid(x.v2)
    )

using oper_precedence_~ = oper_precedence_*

[rtct]
    [initCtor] class Tuple(t1, t2: Type)
        using arity = 2
        var v1: t1
        var v2: t2

        [convert] fun ctor(other: TupleType) if other.arity == 2
            this.v1 ctor other.v1
            this.v2 ctor other.v2

    [initCtor] class Tuple(t1, t2, t3: Type)
        using arity = 3
        var v1: t1
        var v2: t2
        var v3: t3

    [initCtor] class Tuple(t1, t2, t3, t4: Type)
        using arity = 4
        var v1: t1
        var v2: t2
        var v3: t3
        var v4: t4

    [initCtor] class Tuple(t1, t2, t3, t4, t5: Type)
        using arity = 5
        var v1: t1
        var v2: t2
        var v3: t3
        var v4: t4
        var v5: t5

    [initCtor] class Tuple(t1, t2, t3, t4, t5, t6: Type)
        using arity = 6
        var v1: t1
        var v2: t2
        var v3: t3
        var v4: t4
        var v5: t5
        var v6: t6

    [initCtor] class Tuple(t1, t2, t3, t4, t5, t6, t7: Type)
        using arity = 7
        var v1: t1
        var v2: t2
        var v3: t3
        var v4: t4
        var v5: t5
        var v6: t6
        var v7: t7

    [initCtor] class Tuple(t1, t2, t3, t4, t5, t6, t7, t8: Type)
        using arity = 8
        var v1: t1
        var v2: t2
        var v3: t3
        var v4: t4
        var v5: t5
        var v6: t6
        var v7: t7
        var v8: t8

    [initCtor] class Tuple(t1, t2, t3, t4, t5, t6, t7, t8, t9: Type)
        using arity = 9
        var v1: t1
        var v2: t2
        var v3: t3
        var v4: t4
        var v5: t5
        var v6: t6
        var v7: t7
        var v8: t8
        var v9: t9

    [initCtor] class Tuple(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10: Type)
        using arity = 10
        var v1: t1
        var v2: t2
        var v3: t3
        var v4: t4
        var v5: t5
        var v6: t6
        var v7: t7
        var v8: t8
        var v9: t9
        var v10: t10

    fun mkTuple(v1,v2: AnyType) = Tuple(typeOf(v1), typeOf(v2))(v1,v2)
    fun mkTuple(v1,v2,v3: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3))(v1,v2,v3)
    fun mkTuple(v1,v2,v3,v4: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3), typeOf(v4))(v1,v2,v3,v4)
    fun mkTuple(v1,v2,v3,v4,v5: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3), typeOf(v4), typeOf(v5))(v1,v2,v3,v4,v5)
    fun mkTuple(v1,v2,v3,v4,v5,v6: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3), typeOf(v4), typeOf(v5), typeOf(v6))(v1,v2,v3,v4,v5,v6)
    fun mkTuple(v1,v2,v3,v4,v5,v6,v7: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3), typeOf(v4), typeOf(v5), typeOf(v6), typeOf(v7))(v1,v2,v3,v4,v5,v6,v7)
    fun mkTuple(v1,v2,v3,v4,v5,v6,v7,v8: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3), typeOf(v4), typeOf(v5), typeOf(v6), typeOf(v7), typeOf(v8))(v1,v2,v3,v4,v5,v6,v7,v8)
    fun mkTuple(v1,v2,v3,v4,v5,v6,v7,v8,v9: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3), typeOf(v4), typeOf(v5), typeOf(v6), typeOf(v7), typeOf(v8), typeOf(v9))(v1,v2,v3,v4,v5,v6,v7,v8,v9)
    fun mkTuple(v1,v2,v3,v4,v5,v6,v7,v8,v9,v10: AnyType) = Tuple(typeOf(v1), typeOf(v2), typeOf(v3), typeOf(v4), typeOf(v5), typeOf(v6), typeOf(v7), typeOf(v8), typeOf(v9), typeOf(v10))(v1,v2,v3,v4,v5,v6,v7,v8,v9,v10)

    fun ~(v1,v2: AnyType) = mkTuple(v1,v2) if !TupleType(v1)
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, ex) if TupleType(t) && t.arity == 2
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, t.v3, ex) if TupleType(t) && t.arity == 3
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, t.v3, t.v4, ex) if TupleType(t) && t.arity == 4
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, t.v3, t.v4, t.v5, ex) if TupleType(t) && t.arity == 5
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, t.v3, t.v4, t.v5, t.v6, ex) if TupleType(t) && t.arity == 6
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, t.v3, t.v4, t.v5, t.v6, t.v7, ex) if TupleType(t) && t.arity == 7
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, t.v3, t.v4, t.v5, t.v6, t.v7, t.v8, ex) if TupleType(t) && t.arity == 8
    fun ~(t,ex: AnyType) = mkTuple(t.v1, t.v2, t.v3, t.v4, t.v5, t.v6, t.v7, t.v8, t.v9, ex) if TupleType(t) && t.arity == 9

    [ctGeneric] fun *(t1,t2: Type): Type = Tuple(t1, t2) //if !TupleType(#$t1)
    //[ctGeneric] fun *(tt,tex: Type): Type = Tuple(typeOf(tt.v1), typeOf(tt.v2), tex) if TupleType(#$tt) && tt.arity == 2


    fun first(t: @TupleType) = t.v1
    fun second(t: @TupleType) = t.v2

    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3) if t.arity == 3
    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3, t.v4) if t.arity == 4
    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3, t.v4, t.v5) if t.arity == 5
    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3, t.v4, t.v5, t.v6) if t.arity == 6
    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3, t.v4, t.v5, t.v6, t.v7) if t.arity == 7
    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3, t.v4, t.v5, t.v6, t.v7, t.v8) if t.arity == 8
    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3, t.v4, t.v5, t.v6, t.v7, t.v8, t.v9) if t.arity == 9
    fun tail(t: @TupleType) = mkTuple(t.v2, t.v3, t.v4, t.v5, t.v6, t.v7, t.v8, t.v9, t.v10) if t.arity == 10

    fun <(lhs, rhs: TupleType) if typeOf(lhs) == typeOf(rhs) && lhs.arity == 2
        if ( lhs.v1 < rhs.v1 )      return true
        else if ( rhs.v1 < lhs.v1 ) return false
        else if ( lhs.v2 < rhs.v2 ) return true
        return false
    fun <(lhs, rhs: TupleType) if typeOf(lhs) == typeOf(rhs) && lhs.arity > 2
        if ( lhs.v1 < rhs.v1 )      return true
        else if ( rhs.v1 < lhs.v1 ) return false
        return tail(lhs) < tail(rhs)

    fun >>(t: @TupleType, os: @OutStream)
        os << '(' << t.v1
        _dumpTail(t, os)
        os << ')'

    class MakePair(firstType: Type, secondType: Type)
        using FirstType = firstType
        using SecondType = secondType

    fun ()(this: MakePair, fst: this.FirstType, snd: this.SecondType): Tuple(FirstType, SecondType)
        return Tuple(FirstType, SecondType)(fst, snd)

    class PairFirst(pairType: Type)
        using PairType = pairType

    fun ()(this: PairFirst, pair: @this.PairType): @typeOf(pair.v1)
        return pair.v1

    class PairSecond(pairType: Type)
        using PairType = pairType

    fun ()(this: PairSecond, pair: @this.PairType): @typeOf(pair.v2)
        return pair.v2

    fun _dumpTail(t: @TupleType, os: @OutStream) if t.arity == 2
        os << ',' << t.v2
    fun _dumpTail(t: @TupleType, os: @OutStream) if t.arity > 2
        os << ',' << t.v2
        _dumpTail(t tail, os)
