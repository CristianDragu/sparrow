module std.vector;

import contiguousMemoryRange(ContiguousMemoryRange);
import rawPtr(RawPtr);
import ranges(RandomAccessRange, ..);

[rtct] fun mkVector(range: Range) = Vector(-@ range.RetType)(range);

[rtct] class Vector(valueType: Type)
{
    using ValueType = valueType;
    using ValuePassType = !@valueType;

    using RangeType = ContiguousMemoryRange(valueType);

    fun ctor(other: @Vector)
    {
        var size = other.size();

        _begin = RawPtr(ValueType).alloc(size);
        _end = _begin.advance(size);
        _endOfStore = _end;

        var dst = _begin;
        var src = other._begin;

        while dst != _end
        {
            dst.value().ctor(src.value());
            dst = dst.advance();
            src = src.advance();
        }
    }

    fun ctor(size: SizeType)
    {
        // Allocate the buffer
        _begin = RawPtr(ValueType).alloc(size);
        _end = _begin.advance(size);
        _endOfStore = _end;

        // Construct the elements
        var p = _begin;
        while p != _end ; p = p.advance()
            p.value().ctor();
    }

    fun ctor(range: Range) if !RandomAccessRange(range)
    {
        _begin.ctor();
        _end.ctor();
        _endOfStore.ctor();
        for v = range
            pushBack(v);
    }

    fun ctor(range: RandomAccessRange)
    {
        _begin.ctor();
        _end.ctor();
        _endOfStore.ctor();
        reserve(range.size());
        for v = range
            pushBack(v);
    }

    [rt] fun ctorFromCt(src: Vector ct)
    {
        this.ctor();
        this.reserve(ctEval(src.size()));
        [ct] for el: ValueType = src.all()
            this.pushBack(el);
    }

    fun swap(other: @Vector)
    {
        var tmp = _begin;

        _begin = other._begin;
        other._begin = tmp;
        tmp = _end;
        _end = other._end;
        other._end = tmp;
        tmp = _endOfStore;
        _endOfStore = other._endOfStore;
        other._endOfStore = tmp;
    }

    fun dtor
    {
        var p = _begin;

        while p != _end ; p = p.advance()
            p.value().dtor();
        _begin.freePtr();
    }

    fun size: SizeType = _end.diff(_begin);
    fun isEmpty = _begin == _end;
    fun capacity: SizeType = _endOfStore.diff(_begin);

    fun reserve(n: SizeType)
    {
        var curCapacity = capacity();

        if ( n <= curCapacity )
            return;


        if ( n < _initialCapacity )
            n = _initialCapacity;
        if ( n < _growthFactor*curCapacity )
            n = SizeType(_growthFactor*curCapacity);

        var curSize = size();

        _begin.reallocPtr(n);
        _end = _begin.advance(curSize);
        _endOfStore = _begin.advance(n);
    }

    fun at(index: SizeType)    = _begin.advance(index).value();
    fun ()(index: SizeType)    = _begin.advance(index).value();
    fun front                   = _begin.value();
    fun back                    = _end.advance(-1).value();
    fun all                     = RangeType(_begin, _end);
    fun subrange(index: SizeType, num: SizeType): RangeType = RangeType(_begin.advance(index), _begin.advance(index + num));

    fun insertBefore(value: ValuePassType, pos: RangeType)
    {
        var posCount = pos.frontPtr().diff(_begin);

        reserve(size() + 1);

        var p = _end.advance(-1);
        var q = _begin.advance(posCount - 1);

        while p != q ; p = p.advance(-1)
        {
            p.advance().value().ctor(p.value());
            p.value().dtor();
        }
        p.advance().value().ctor(value);
        _end = _end.advance();
    }

    fun insertBefore(range: Range, pos: RangeType)
    {
        var n = range.size();
        var index = pos.frontPtr().diff(_begin);

        reserve(size() + n);

        var p = _end.advance(-1);
        var q = _begin.advance(index - 1);

        while p != q ; p = p.advance(-1)
        {
            p.advance(n).value().ctor(p.value());
            p.value().dtor();
        }
        p = p.advance();
        while !range.isEmpty()
        {
            p.value().ctor(range.front());
            p = p.advance();
            range.popFront();
        }
        _end = _end.advance(n);
    }

    fun insertAfter(value: ValuePassType, pos: RangeType)
    {
        insertBefore(value, RangeType(pos.backPtr(), _end));
    }

    fun insertAfter(range: Range, pos: RangeType)
    {
        insertBefore(range, RangeType(pos.backPtr(), _end));
    }

    fun pushBack(value: ValuePassType)
    {
        if ( _end == _endOfStore )
        {
            var t = 2 * capacity();

            if ( t < 2 )
                t = 2;
            reserve(t);
        }
        _end.value().ctor(value);
        _end = _end.advance();
    }
    fun +=(value: ValuePassType) { pushBack(value); }

    fun popBack()
    {
        _end = _end.advance(-1);
        _end.value().dtor();
    }

    fun remove(range: RangeType)
    {
        var rBegin = range.frontPtr();
        var rEnd = range.backPtr();

        // Destruct all elements in the range
        for el = range
            el.dtor();

        // Move back elements in front
        while rEnd != _end
        {
            rBegin.value().ctor(rEnd.value());
            rEnd.value().dtor();
            rBegin = rBegin.advance();
            rEnd = rEnd.advance();
        }
        _end = rBegin;
    }

    fun remove(index: SizeType)
    {
        var r = all();

        r.popFront(index);
        r.popBack(size() - index - 1);
        remove(r);
    }

    fun resize(n: SizeType)
    {
        var oldSize = size();

        if ( n == oldSize )
            return;

        if ( n < oldSize )
        {
            var newEnd = _begin.advance(n);

            while _end != newEnd
            {
                _end = _end.advance(-1);
                _end.value().dtor();
            }
        }
        else
        {
            reserve(n);

            var newEnd = _begin.advance(n);

            while _end != newEnd
            {
                _end.value().ctor();
                _end = _end.advance();
            }
        }
    }

    fun clear()
    {
        remove(RangeType(_begin, _end));
    }

    fun =(other: @Vector): @Vector
    {
        var tmp = other;

        tmp.swap(this);

        return this;
    }

    fun ==(other: @Vector): Bool
    {
        if ( size() != other.size() )
            return false;

        var i = 0;
        var s = size();

        while i < s ; i++
        {
            if ( !(at(i) == other.at(i)) )
                return false;
        }
        return true;
    }

    fun !=(other: @Vector): Bool = !(this == other);

    fun assign(range: Range)
    {
        clear();
        for v = range
            pushBack(v);
    }

    fun >>(os: @OutStream) if isValid(os << #$ValueType)
    {
        os << "Vec(";
        for i = 0..size
            if ( i > 0 )
                os << ", ";
            os << at(i);
        os << ')';
    }

    fun _dumpThis(prefix: StringRef)
    {
        cout << prefix << "dumping " << TypeOp.description(Vector) << ": " << mkStreamRefWrapper(this) << endl;
        cout << "    size: " << Int(size()) << endl;
        cout << "    _begin: " << mkStreamRefWrapper(_begin.bytePtr()) << endl;
        cout << "    _end: " << mkStreamRefWrapper(_end.bytePtr()) << endl;
        cout << "    _endOfStore: " << mkStreamRefWrapper(_endOfStore.bytePtr()) << endl;
    }

    using _initialCapacity = 8;
    using _growthFactor = 2.0;

    var _begin, _end, _endOfStore: RawPtr(ValueType);
}
