/// External functions used in the Sparrow parser & scanner
module sparrowc.spr.grammar.ext;

import node;
import meta.location;

// All the functions here are defined in the compiler

fun[native("comp_parser_reportError")] reportErrorExternal(loc: @Location, msg: StringRef);

fun[native("comp_parser_addToNodeList")] addToNodeList(nl, newNode: Node): Node;

fun[native("comp_parser_mkModifiers")] mkModifiers(loc: @Location, main, mods: Node): Node;
fun[native("comp_parser_mkModule")] mkModule(loc: @Location, moduleName, decls: Node): Node;
fun[native("comp_parser_mkImportName")] mkImportName(loc: @Location, alias: StringRef, toImport, decls: Node): Node;
fun[native("comp_parser_mkUsing")] mkUsing(loc: @Location, alias: StringRef, usingNode: Node): Node;
fun[native("comp_parser_mkPackage")] mkPackage(loc: @Location, name: StringRef, children: Node): Node;
fun[native("comp_parser_mkClass")] mkClass(loc: @Location, name: StringRef, params, underlyingData, ifClause, children: Node): Node;
fun[native("comp_parser_mkConcept")] mkConcept(loc: @Location, name, paramName: StringRef, baseConcept, ifClause: Node): Node;
fun[native("comp_parser_mkVar")] mkVar(loc: @Location, name: StringRef, typeNode, init: Node): Node;
fun[native("comp_parser_mkParameter")] mkParameter(loc: @Location, name: StringRef, typeNode, init: Node): Node;
fun[native("comp_parser_mkFun")] mkFun(loc: @Location, name: StringRef, formals, retType, body, bodyExp, ifClause: Node): Node;

fun[native("comp_parser_mkParenthesisExpr")] mkParenthesisExpr(expr: Node): Node;
fun[native("comp_parser_mkPostfixOp")] mkPostfixOp(loc: @Location, base: Node, op: StringRef): Node;
fun[native("comp_parser_mkInfixOp")] mkInfixOp(loc: @Location, lhs: Node, op: StringRef, rhs: Node): Node;
fun[native("comp_parser_mkPrefixOp")] mkPrefixOp(loc: @Location, op: StringRef, base: Node): Node;
fun[native("comp_parser_mkIdentifier")] mkIdentifier(loc: @Location, id: StringRef): Node;
fun[native("comp_parser_mkCompoundExpr")] mkCompoundExpr(loc: @Location, base: Node, id: StringRef): Node;
fun[native("comp_parser_mkStarExpr")] mkStarExpr(loc: @Location, base: Node, id: StringRef): Node;
fun[native("comp_parser_mkDotExpr")] mkDotExpr(loc: @Location, base: Node, id: StringRef): Node;
fun[native("comp_parser_mkFunAppExpr")] mkFunAppExpr(loc: @Location, base, args: Node): Node;
fun[native("comp_parser_mkLambdaExpr")] mkLambdaExpr(loc: @Location, closureParams, formals, retType, body, bodyExpr: Node): Node;
fun[native("comp_parser_mkThisExpr")] mkThisExpr(loc: @Location): Node;
fun[native("comp_parser_mkNullLiteral")] mkNullLiteral(loc: @Location): Node;
fun[native("comp_parser_mkBoolLiteral")] mkBoolLiteral(loc: @Location, val: Bool): Node;
fun[native("comp_parser_mkIntLiteral")] mkIntLiteral(loc: @Location, val: Int): Node;
fun[native("comp_parser_mkUIntLiteral")] mkUIntLiteral(loc: @Location, val: UInt): Node;
fun[native("comp_parser_mkLongLiteral")] mkLongLiteral(loc: @Location, val: Long): Node;
fun[native("comp_parser_mkULongLiteral")] mkULongLiteral(loc: @Location, val: ULong): Node;
fun[native("comp_parser_mkFloatLiteral")] mkFloatLiteral(loc: @Location, val: Float): Node;
fun[native("comp_parser_mkDoubleLiteral")] mkDoubleLiteral(loc: @Location, val: Double): Node;
fun[native("comp_parser_mkCharLiteral")] mkCharLiteral(loc: @Location, val: Char): Node;
fun[native("comp_parser_mkStringLiteral")] mkStringLiteral(loc: @Location, data: StringRef): Node;

fun[native("comp_parser_mkBlockStmt")] mkBlockStmt(loc: @Location, stmts: Node): Node;
fun[native("comp_parser_mkIfStmt")] mkIfStmt(loc: @Location, expr, thenClause, elseClause: Node): Node;
fun[native("comp_parser_mkForStmt")] mkForStmt(loc: @Location, id: StringRef, typeNode, range, action: Node): Node;
fun[native("comp_parser_mkWhileStmt")] mkWhileStmt(loc: @Location, expr, stepAction, body: Node): Node;
fun[native("comp_parser_mkBreakStmt")] mkBreakStmt(loc: @Location): Node;
fun[native("comp_parser_mkContinueStmt")] mkContinueStmt(loc: @Location): Node;
fun[native("comp_parser_mkReturnStmt")] mkReturnStmt(loc: @Location, expr: Node): Node;
