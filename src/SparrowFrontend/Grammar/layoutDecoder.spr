module sparrowc.spr.grammar.layoutDecoder

import parserDefs, node, token, ext, rangeWithLookahead
import meta.location

/**
 * This decodes the layout of Sparrow code, and generate corresponding tokens for it.
 *
 * It will check for new-lines, and depending on the column number of the first
 * tokens of each line computes the open and close scope tokens, and also the
 * SEMI token.
 *
 * Rules:
 * 1) two lines that start with the same column will be separated by a SEMI, unless:
 *     - the next token is a '{'
 *     - the previous token is either a ';' or a '}'
 * 2) a line that is more indented than the previous line will insert a '{'
 * 3) when decreasing indent, we insert a ';' and as many '}' to match the new indentation
 * 4) inside parenthesis or brackets, we don't insert anything, except:
 *     - if we are inside curly braces that are inside the inner most paren/brackets
 */
class SparrowLayoutDecoder(tokensRangeType, errorReporterType: Type) \
        if TokenRange(#$tokensRangeType) && ErrorReporter(#$errorReporterType)
    using RetType = Token
    using _IsSparrowLayoutDecoder = true

    fun ctor(tokens: tokensRangeType, errorReporter: errorReporterType)
        this._src ctor tokens
        this._errorReporter ctor errorReporter
        this._indents += 1      // Start at column 1
        this._toInject = tkSEMICOLON
        this._toInjectCnt = 0

        // If we start by a new-line, advance
        if !(_src isEmpty) && (_src front).type == tkEOL
            this popFront

    /// The source ranges of tokens we will used while parsing
    var _src: RangeWithLookahead(tokensRangeType)
    /// Object used to report errors
    var _errorReporter: errorReporterType
    /// The vector containing the current indents levels
    var _indents: UInt Vector
    /// The vector of currently open parenthesis and brackets
    var _parens: Char Vector
    /// Indicates what and how many tokens we should inject in the stream
    var _toInject: TokenType
    /// The number of tokens to be injected
    /// If the number of tokens is greater than 1, we change the type to '}'
    var _toInjectCnt: Int

/// Concept that matches SparrowParser above
concept _This(t) if t._IsSparrowLayoutDecoder

fun isEmpty(t: @_This): Bool = t._toInjectCnt == 0 && (t._src isEmpty)
fun front(t: @_This): Token
    var tk = t._src front
    if t._toInjectCnt > 0
        tk.type = t._toInject
    return tk
fun popFront(t: @_This)
    // Are we moving past the injected tokens?
    if t._toInjectCnt > 0
        t._toInjectCnt--         // Consume one injected token
        // After the first token injected, switch to '}'
        t._toInject = tkRCURLY
        return

    var oldType = (t front).type

    // Consume the current token from the input range
    t._src popFront

    // Check for line endings
    var changeLine = (t._src front).type == tkEOL
    while (t._src front).type == tkEOL
        t._src popFront

    var tk = t._src front

    // Apply special logic on line change -- only outside any parenthesis
    var outsideParens = t._parens.isEmpty || t._parens.back == '{'.char
    if changeLine && outsideParens
        var newCol = tk.loc.start.col
        var oldCol = t._indents.back

        // If we are at the end of file, make sure to insert the missing '}'
        if tk.type == tkEND
            newCol = 1

        // Inject a semicolon if we stay on the same line, and we are not followed by a open curly
        if newCol == oldCol && tk.type != tkLCURLY && oldType != tkSEMICOLON && oldType != tkRCURLY
            t._toInject = tkSEMICOLON
            t._toInjectCnt = 1

        // Inject an open curly if we have an indent
        // Also record add the new indent level to the stack of indents, to
        // know how many scopes we need to pop
        if newCol > oldCol && tk.type != tkEND
            t._toInject = tkLCURLY
            t._toInjectCnt = 1
            t._indents += newCol

        // Inject close curly if we have dedent
        // Make sure to insert the right number of close curly brackets to match
        // the indent level
        if newCol < oldCol && newCol>=1
            // Check how many '}' we need to insert
            var numDedents = 0
            while newCol < t._indents.back
                numDedents++
                t._indents.popBack
            // Insert a ';', then numDedents of '}'
            t._toInject = tkSEMICOLON
            t._toInjectCnt = 1+numDedents
            // The new column must match one of the previous indents
            if newCol != t._indents.back
                t._errorReporter.reportError(tk.loc, toString("Invalid indentation, expecting ", t._indents.back, ", got ", newCol))

    // Check for parenthesis
    if tk.type == tkLPAREN
        t._parens += '('.char
    else if tk.type == tkLBRACKET
        t._parens += '['.char
    else if tk.type == tkLCURLY
        t._parens += '{'.char
    else if tk.type == tkRPAREN && t._parens.back == '('.char
        t._parens.popBack
    else if tk.type == tkRBRACKET && t._parens.back == '['.char
        t._parens.popBack
    else if tk.type == tkRCURLY && t._parens.back == '{'.char
        t._parens.popBack

