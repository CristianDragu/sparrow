module sparrowc.spr.grammar.rangeWithLookahead;

import std.tuple;
import std.vector;
import std.ranges;


/// Helper class that provides lookup functionality over a Range
///
/// This will hold an internal buffer of elements from the given range
/// If there are not enough items in the source range we give back the default-constructed element
class RangeWithLookahead(baseRangeType: Type) if Range(#$baseRangeType) {
    using RetType = -@(baseRangeType.RetType);
    using IsRangeWithLookahead = true;

    var source: baseRangeType;
    var buffer: Vector(RetType);

    fun ctor(src: baseRangeType) {
        this.source = src;
        this.buffer ctor;
        this.buffer reserve 10;

        // Always have at least one element in the buffer
        if ( !!source )
            buffer += (source++);
    }
}
private concept OurRangeWithLookahead(t) if t.IsRangeWithLookahead;

fun isEmpty(s: @OurRangeWithLookahead): Bool = s.buffer isEmpty;
fun front(s: @OurRangeWithLookahead): s.RetType = s.buffer front;
fun popFront(s: @OurRangeWithLookahead) {
    s.buffer remove 0;
    // Add a new element in the buffer if the buffer is empty
    if ( (s.buffer isEmpty) && !!s.source )
        s.buffer += (s.source++);
}

fun peek(s: @OurRangeWithLookahead, n: UInt): s.RetType {
    // If not enough elements in the buffer, add them now
    while ( n >= s.buffer.size && !!s.source )
        s.buffer += (s.source++);
    if ( n < s.buffer.size )
        return s.buffer(n);
    else
        return s.RetType(); // not enough elements in the source
}
fun hasLessThan(s: @OurRangeWithLookahead, n: UInt): Bool {
    // Try to fill the buffer with the amount of elements
    while ( n >= s.buffer.size && !!s.source )
        s.buffer += (s.source++);
    // Check if we have enough elements in the buffer
    return n >= s.buffer.size;
}


