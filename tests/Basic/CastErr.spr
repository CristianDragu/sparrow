//!! -t "SparrowImplicitLib.spr"
package Test;

class Base
{
    var a: Int;
    
    fun ctor(i: Int) { a = i; }
    fun ctor(other: Base) { a = other.a; }
}

class Derived: Base
{
    var b: Int;

    fun ctor(i,j: Int) { a = i; b = j; }
}

fun printBase(b: Base)
{
    write('B'); write('-'); writeLn(b.a);
}

fun printDerived(d: Derived)
{
    write('D'); write('-'); write(d.a); write(' '); writeLn(d.b);
}

fun makeBase(): Base;
fun makeBaseRef(): Base@;
fun makeDerived(): Derived;
fun makeDerivedRef(): Derived@;

fun[native("test")] test(n: Int)
{
    var b = Base(1);
    //var d = Derived(10, 11);
    var d: Derived;
    d.a = 10;
    d.b = 11;
    
    var br: Base@ = b;
    var dr: Derived@ = d;
    
    br := b;
    dr := d;
    
    printBase(b);
    printBase(d);
    printDerived(d);
    printBase(br);
    printBase(dr);
    printDerived(dr);
    
    writeLn('-');
    
    // Static casts
    printBase(cast(Base, b));
    printBase(cast(Base, d));
    printBase(cast(Base@, b));
    printBase(cast(Base@, d));
    printDerived(cast(Derived, b));
    printDerived(cast(Derived, d));
    printDerived(cast(Derived@, b));
    printDerived(cast(Derived@, d));
    
    // Reinterpret casts
    printBase(reinterpretCast(Base, b));                // ERROR - dest is not a reference
    printBase(reinterpretCast(Base, d));                // ERROR - dest is not a reference
    printBase(reinterpretCast(Base@, b));
    printBase(reinterpretCast(Base@, d));
    printDerived(reinterpretCast(Derived, b));          // // ERROR - dest is not a reference
    printDerived(reinterpretCast(Derived, d));          // // ERROR - dest is not a reference
    printDerived(reinterpretCast(Derived@, b));
    printDerived(reinterpretCast(Derived@, d));
    printDerived(reinterpretCast(Derived, makeBase()));         // ERROR - not a reference
    printDerived(reinterpretCast(Derived, makeDerived()));      // ERROR - not a reference
    printDerived(reinterpretCast(Derived@, makeBase()));        // ERROR - not a reference
    printDerived(reinterpretCast(Derived@, makeDerived()));     // ERROR - not a reference
    printDerived(reinterpretCast(Derived, makeBaseRef()));      // ERROR - dest is not a reference
    printDerived(reinterpretCast(Derived, makeDerivedRef()));   // ERROR - dest is not a reference
    printDerived(reinterpretCast(Derived@, makeBaseRef()));
    printDerived(reinterpretCast(Derived@, makeDerivedRef()));
    
    // Cast between standard types
    writeLn(cast(Int, 1.0));                            // ERROR
    writeLn(cast(Double, 1));                           // OK - we can directly cast Int to Double
    writeLn(reinterpretCast(Int, 1.0));                 // ERROR - not a refence
    writeLn(reinterpretCast(Double, 1));                // ERROR - not a refence
    writeLn(reinterpretCast(Byte, true));               // ERROR - not a refence
    writeLn(reinterpretCast(Byte, false));              // ERROR - not a refence
    
    writeLn(cast(Int, b));                              // ERROR
    writeLn(reinterpretCast(Int@, b));
    writeLn(reinterpretCast(Int@, d));

    cast(1,2,3);                            // ERROR
    reinterpretCast(1,2,3);                 // ERROR
    cast(cast, 2);                          // ERROR
    reinterpretCast(cast, 2);               // ERROR
    cast(invalidName, 2);                   // ERROR    
    reinterpretCast(invalidName, 2);        // ERROR
    cast(Int, invalidName);                 // ERROR
    reinterpretCast(Int, invalidName);      // ERROR
    cast(Int, cast);                        // ERROR
    reinterpretCast(Int, cast);             // ERROR
}
