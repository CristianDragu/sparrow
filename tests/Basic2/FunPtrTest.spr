//!!

fun stdFunInt(n: Int): Int
    cout << "stdFunInt(" << n << ") called"
    return n*10

fun stdFun(s: StringRef): StringRef
    if ( s.isEmpty() )
        cout << "Given string is empty!" << endl << flush
    cout << "stdFun(" << s << ") called" << flush
    return "stdFun"

fun f(arg: Int): Int
    cout << 'f(Int) called'
    return arg

fun f(arg: Double): Double
    cout << 'f(Double) called'
    return arg

fun sprMain
    if ( programArgs.size() < 2 )
        return
    var n = programArgs(1) asInt

    if      n == 1; test1
    else if n == 2; test2
    else if n == 3; test3
    else if n == 4; test4
    else cout << "Invalid test number!\n"

fun test1
    var f0 = \stdFunInt
    var r0 = f0(10)
    cout << " => " << r0 << endl

    var f1 = \stdFun
    var r1 = f1("Hello, world!")
    cout << " => " << r1 << endl
/*<<< Basic testing of FunctionPtr(1)
stdFunInt(10) called => 100
stdFun(Hello, world!) called => stdFun
>>>*/

fun test2
    var f0 = \(stdFunInt)
    var r0 = f0(10)
    cout << " => " << r0 << endl

    var f1 = \(stdFun)
    var r1 = f1("Hello, world!")
    cout << " => " << r1 << endl
/*<<< FunctionPtr applied to parenthesis(2)
stdFunInt(10) called => 100
stdFun(Hello, world!) called => stdFun
>>>*/

fun test3
    var f0 = \(f(0))
    var r0 = f0(10)
    cout << ' => ' << r0 << '\n'

    var f1 = \(f(3.14))
    var r1 = f1(2.71)
    cout << ' => ' << r1 << '\n'
/*<<< FunctionPtr applied to overloaded function(3)
f(Int) called => 10
f(Double) called => 2.71
>>>*/

fun test4
    var f0 = \f(0)
    var r0 = f0(10)
    cout << ' => ' << r0 << '\n'

    var f1 = \f(3.14)
    var r1 = f1(2.71)
    cout << ' => ' << r1 << '\n'
/*<<< FunctionPtr applied to overloaded function - no parens(4)
f(Int) called => 10
f(Double) called => 2.71
>>>*/

