//!!

concept Regular(x) if (
       isValid(x.ctor())        // Default construction
    && isValid(x.ctor(x))       // Copy construction
    && isValid(x.dtor())        // Destruction
    && typeOf(x == x) == Bool   // Equality is defined
    );


[noDefault]
datatype NullType
    ;

fun ctor(this: @NullType) {}
[convert] fun ctor(this: @NullType, other: AnyType) {}
fun dtor(this: NullType) {}

fun ==(this, other: NullType) = true;
fun ==(this, other: AnyType) = false;


fun testRegular(x: Regular)
    cout << TypeOp.description(typeOf(x)) << " is Regular\n";

fun testRegular(x: AnyType) if !Regular(x)
    cout << TypeOp.description(typeOf(x)) << " is not Regular\n";

datatype MyType
    ;
    // Operators are implicitly defined

package Isolated
    [noDefault]
    datatype EmptyType
        ;

fun sprMain
    testRegular(1);
    testRegular(1.0);
    var o: NullType;
    var o1: MyType;
    var o2: Isolated.EmptyType;
    testRegular(o);
    testRegular(o1);
    testRegular(o2);
/*<<<Running()
Int/rtct is Regular
Double/rtct is Regular
NullType/rtct is Regular
MyType/rtct is Regular
EmptyType/rtct is not Regular
>>>*/

