//!! -t ""
nodelist{

    backendcode{
"@.str = private unnamed_addr constant [4 x i8] c\"15\\0A\\00\", align 1"
"@.fmtInt = private unnamed_addr constant [4 x i8] c\"%d\\0A\\00\", align 1"
""
"define void @writeLnInt(i32 %val) {"
"  %1 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @.fmtInt, i32 0, i32 0), i32 %val)"
"  ret void"
"}"
""
"define i32 @mul(i32 %x, i32 %y) {"
"  %1 = mul i32 %x,%y"
"  ret i32 %1"
"}"
""
"define i32 @sub(i32 %x, i32 %y) {"
"  %1 = sub i32 %x,%y"
"  ret i32 %1"
"}"
""
"define i1 @equal(i32 %x, i32 %y) {"
"  %1 = icmp eq i32 %x,%y"
"  ret i1 %1"
"}"
""
"define i32 @main(i32 %argc, i8** %argv) nounwind uwtable {"
"  %1 = alloca i32, align 4"
"  %2 = alloca i32, align 4"
"  %3 = alloca i8**, align 8"
"  store i32 0, i32* %1"
"  store i32 %argc, i32* %2, align 4"
"  store i8** %argv, i8*** %3, align 8"
"  %4 = load i8*** %3, align 8"
"  %5 = getelementptr inbounds i8** %4, i64 1"
"  %6 = load i8** %5"
"  %7 = call i32 @atoi(i8* %6) nounwind readonly"
"  call void @test(i32 %7)"
"  ret i32 0"
"}"
""
"declare i32 @atoi(i8*) nounwind readonly"
"declare i32 @printf(i8*, ...)"
"declare void @test(i32)"
    }
    
    class { Int
        autoct
        propStr("nativeName", "i32")
    }
    
    class { Bool
        autoct
        propStr("nativeName", "u1")
    }
    
    class { Pair
        field(x,Int)
        field(y,Int)
    }
    
    class { PairOfPair
        field(x,Pair)
        field(y,Pair)
    }
    
    class { IntRef
        field(x, ref(Int))
    }
    
    var(gi, Int)
    var(gp, Pair)
    var(gpp, PairOfPair)
    var(gri, ref(Int))
    var(grp, ref(Pair))
    var(grpp, ref(PairOfPair))
    
    function(writeLnInt, params(var(val,Int)), void)
    
    function(test, params(var(x,Int)), void, localspace{
        funCall(writeLnInt, ctValueBin(Int, "0f 00 00 00"))
        
        // Initialize the values
        memStore(varref(gi), varref(gri))
        memStore(varref(gp), varref(grp))
        memStore(varref(gpp), varref(grpp))
        
        memStore(ctValueBin(Int, "01 00 00 00"), varref(gi))
        memStore(ctValueBin(Int, "02 00 00 00"), fieldref(varref(gp), Pair, x))
        memStore(ctValueBin(Int, "03 00 00 00"), fieldref(varref(gp), Pair, y))
        memStore(ctValueBin(Int, "04 00 00 00"), fieldref(fieldref(varref(gpp), PairOfPair, x), Pair, x))
        memStore(ctValueBin(Int, "05 00 00 00"), fieldref(fieldref(varref(gpp), PairOfPair, x), Pair, y))
        memStore(ctValueBin(Int, "06 00 00 00"), fieldref(fieldref(varref(gpp), PairOfPair, y), Pair, x))
        memStore(ctValueBin(Int, "07 00 00 00"), fieldref(fieldref(varref(gpp), PairOfPair, y), Pair, y))

        // Now print the value
        funCall(writeLnInt, memLoad(varref(gi)))
        funCall(writeLnInt, memLoad(fieldref(varref(gp), Pair, x)))
        funCall(writeLnInt, memLoad(fieldref(varref(gp), Pair, y)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(varref(gpp), PairOfPair, x), Pair, x)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(varref(gpp), PairOfPair, x), Pair, y)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(varref(gpp), PairOfPair, y), Pair, x)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(varref(gpp), PairOfPair, y), Pair, y)))

        funCall(writeLnInt, memLoad(memLoad(varref(gri))))
        funCall(writeLnInt, memLoad(fieldref(memLoad(varref(grp)), Pair, x)))
        funCall(writeLnInt, memLoad(fieldref(memLoad(varref(grp)), Pair, y)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(memLoad(varref(grpp)), PairOfPair, x), Pair, x)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(memLoad(varref(grpp)), PairOfPair, x), Pair, y)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(memLoad(varref(grpp)), PairOfPair, y), Pair, x)))
        funCall(writeLnInt, memLoad(fieldref(fieldref(memLoad(varref(grpp)), PairOfPair, y), Pair, y)))
        
        localSpace {
            localVar(a, Int)
            localVar(b, Pair)
            localSpace {
                localVar(c, Int)
                localVar(d, Pair)
                
                memStore(ctValueBin(Int, "10 00 00 00"), varref(a))
                memStore(ctValueBin(Int, "11 00 00 00"), fieldref(varref(b), Pair, x))
                memStore(ctValueBin(Int, "12 00 00 00"), fieldref(varref(b), Pair, y))
                memStore(ctValueBin(Int, "13 00 00 00"), varref(c))
                memStore(ctValueBin(Int, "14 00 00 00"), fieldref(varref(d), Pair, x))
                memStore(ctValueBin(Int, "15 00 00 00"), fieldref(varref(d), Pair, y))

                funCall(writeLnInt, memLoad(varref(a)))
                funCall(writeLnInt, memLoad(fieldref(varref(b), Pair, x)))
                funCall(writeLnInt, memLoad(fieldref(varref(b), Pair, y)))
                funCall(writeLnInt, memLoad(varref(c)))
                funCall(writeLnInt, memLoad(fieldref(varref(d), Pair, x)))
                funCall(writeLnInt, memLoad(fieldref(varref(d), Pair, y)))
            }
        }

        return
    })
}

/*<<<Running(5)
15
1
2
3
4
5
6
7
1
2
3
4
5
6
7
16
17
18
19
20
21
>>>*/
