//! ! -dump-assembly
import par.thread;
import par.tls;
import std.vector;
import test;

var intTls: Tls(Int);
var ptrTls: Tls(@Int);

class[initCtor] IntWorker {
    private var val1, val2: Int;

    fun ()() {
        assertEq(intTls get, 0);
        intTls = val1;
        assertEq(intTls get, val1);
        intTls = val2;
        assertEq(intTls get, val2);
    }
}

class[initCtor] PtrWorker {
    private var val1, val2: @Int;

    fun ()() {
        assertTrue((ptrTls get) === null);
        ptrTls = val1;
        assertTrue((ptrTls get) === val1);
        ptrTls = val2;
        assertTrue((ptrTls get) === val2);
    }
}

class WorkManager {
    private var numThreads: Int;
    private var threads: (Thread Ptr) Vector;

    fun ctor(numThreads: Int) {
        this.numThreads ctor numThreads;

        var i1 = 10;
        var i2 = 20;
        var pi1: @Int = i1;
        var pi2: @Int = i2;

        for ( i=0..numThreads ) {
            var p: Thread Ptr = new(Thread, IntWorker(i1, i2));
            threads.pushBack(p);
        }

        for ( i=0..numThreads ) {
            var p: Thread Ptr = new(Thread, PtrWorker(pi1, pi2));
            threads.pushBack(p);
        }
    }

    fun dtor {
        for ( t = threads.all ) {
            t.get join;
            t.release;
        }
    }
}


fun sprMain
{
    if ( programArgs.size() < 4 )
        return;
    var numThreads = programArgs(1) asInt;

    var work = WorkManager(numThreads);
}

/*<<<TLS for 1 thread (1)
>>>*/

/*<<<TLS for 10 threads (10)
>>>*/
