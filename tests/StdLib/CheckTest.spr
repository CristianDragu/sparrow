//!!
package Test;

import Check.Check;

using Check.*;

using enableChecks = true;

fun check_associativity(x: Int) = x+2 == 2+x;

fun check_IntIdentity(x: Int) = (x+0) == x && (0+x) == x;

fun classifier(x: Int): String {
    if ( x < 10 )   return "<10";
    if ( x < 20 )   return "<20";
    if ( x < 30 )   return "<30";
    return ">=30";
}

fun isTrivial(x: Int) = x<5;

fun sprMain {
    forAll(Int) check (fun x = true) ~ "that we have something running";

    forAll(Int) check \check_associativity ~ "Int associativity";

    forAll(0..10) check (fun x = x < 5) ~ "than we can report failures";

    forAll(Int) check (fun x = (x+0) == x && (0+x) == x) ~ "that Int has 0 as identity";

    forAll(Int) forWhich (fun x = x>0) take 10 check \check_IntIdentity ~ "that positive Ints have 0 as identity";

    forAll(1..100) withClassifier \classifier withTrivials \isTrivial check (fun x = true) ~ "with classifier";

    forAll(elements(10..20)) check (fun x = 10<=x && x<20) ~ "that elements works";
   
    var g1 = elements(10..15);
    var g2 = elements(20..25);
    var g3 = elements(30..35);
    var g4 = oneOf(values(g1, g2, g3));
    forAll(g4) check (fun x = 10<=x && x<50 && x % 10 < 5) ~ "that oneOf works";

    var g5 = frequency(values(1 ~ g1, 6 ~ g2, 2 ~ g3));
    forAll(g5) check (fun x = 10<=x && x<50 && x % 10 < 5) ~ "that frequency works";
}
/*<<<Running()
* Checking that we have something running
OK, passed 100 tests.
* Checking Int associativity
OK, passed 100 tests.
* Checking than we can report failures
Falsifiable after 6 tests, for input:
5
* Checking that Int has 0 as identity
OK, passed 100 tests.
* Checking that positive Ints have 0 as identity
OK, passed 10 tests.
* Checking with classifier
OK, passed 99 tests (4% trivial).
70% : >=30
10% : <30
10% : <20
9% : <10
* Checking that elements works
OK, passed 100 tests.
* Checking that oneOf works
OK, passed 100 tests.
* Checking that frequency works
OK, passed 100 tests.
>>>*/
